<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<?xml-stylesheet ekr_test?>
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="zoomq.20120710140424.5446" a="E"><vh>4SAE</vh>
<v t="zoomq.20120710140424.5454"><vh>@nosent config.yaml</vh></v>
<v t="zoomq.20120710140424.5455"><vh>@nosent index.wsgi</vh></v>
<v t="zoomq.20131226095232.5938"><vh>&lt;&lt;VERSION&gt;&gt;</vh></v>
<v t="zoomq.20120723102156.5544" a="E"><vh>@nosent config.py</vh>
<v t="zoomq.20131226095232.5938"></v>
<v t="zoomq.20120727213305.14750"><vh>&lt;&lt;declarations&gt;&gt;</vh></v>
<v t="zoomq.20120710140424.5456" a="E"><vh>&lt;&lt;cfg4Borg&gt;&gt;</vh>
<v t="zoomq.20130926092950.5432"><vh>环境切换</vh></v>
<v t="zoomq.20130927104354.5456"><vh>storage</vh></v>
<v t="zoomq.20130923093950.3647"><vh>KVDB</vh>
<v t="zoomq.20150202122015.13"><vh>&lt;&lt;UUID&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.5395"><vh>&lt;&lt;CONTENT&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.5396"><vh>&lt;&lt;HISTORIC&gt;&gt;</vh></v>
</v>
<v t="zoomq.20130918155053.7084" a="E"><vh>4wechat</vh>
<v t="zoomq.20150123094404.30"><vh>&lt;&lt;XML模板&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.8818"><vh>&lt;&lt;ALIAS&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.6455"><vh>帮助.系统</vh></v>
<v t="zoomq.20130925103854.6458"><vh>文章查询</vh></v>
</v>
<v t="zoomq.20130925103854.4951"><vh>RESTful</vh>
<v t="zoomq.20131226095232.5937"><vh>&lt;&lt;CLI4wx&gt;&gt;</vh></v>
<v t="zoomq.20131226095232.5936"><vh>&lt;&lt;CLI4sys&gt;&gt;</vh></v>
<v t="zoomq.20131226095232.5935"><vh>&lt;&lt;CLI4pub&gt;&gt;</vh></v>
<v t="zoomq.20131226095232.5934"><vh>&lt;&lt;CLI4usr&gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="zoomq.20130925103854.4957" a="E"><vh>@nosent CLI.py</vh>
<v t="zoomq.20130925103854.4958"><vh>&lt;&lt;docopt&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.4959"><vh>&lt;&lt;declarations&gt;&gt;</vh></v>
<v t="zoomq.20131223160728.4902"><vh>_https_get()</vh></v>
<v t="zoomq.20131224083725.5909"><vh>_https_post()</vh></v>
<v t="zoomq.20131224083725.5906"><vh>_wx_token_get()</vh></v>
<v t="zoomq.20130925103854.4961"><vh>smart_rest()</vh></v>
<v t="zoomq.20130925103854.4960"><vh>_rest_main()</vh>
<v t="zoomq.20150202122015.18"><vh>&lt;&lt;echo matters&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.6450"><vh>&lt;&lt;subs matters&gt;&gt;</vh></v>
<v t="zoomq.20150202122015.17"><vh>&lt;&lt;clic matters&gt;&gt;</vh></v>
<v t="zoomq.20131223160728.4901"><vh>&lt;&lt;GET DEL&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.6451"><vh>&lt;&lt;PUT&gt;&gt;</vh></v>
<v t="zoomq.20130927104354.6053"><vh>&lt;&lt;POST&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.6452"><vh>&lt;&lt;HTTPS&gt;&gt;</vh>
<v t="zoomq.20131224083725.5907"><vh>&lt;&lt;消息发送&gt;&gt;</vh></v>
<v t="zoomq.20131224083725.5904"><vh>&lt;&lt;获取指定用户信息&gt;&gt;</vh></v>
<v t="zoomq.20131224083725.5903"><vh>&lt;&lt;列表获得&gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="zoomq.20120723102156.5541"><vh>module</vh>
<v t="zoomq.20130925103854.6406"><vh>@nosent __init__.py</vh></v>
<v t="zoomq.20120820121523.7422"><vh>@nosent auth.py</vh>
<v t="zoomq.20120820121523.7423"><vh>&lt;&lt;declarations&gt;&gt;</vh></v>
<v t="zoomq.20120820121523.7426"><vh>sha256_uhex</vh></v>
<v t="zoomq.20120820121523.7424"><vh>check_login</vh></v>
<v t="zoomq.20120820121523.7425"><vh>auth_required</vh></v>
<v t="zoomq.20130925103854.6447"><vh>_genArgsStr</vh></v>
<v t="zoomq.20130925103854.6449"><vh>_genQueryArgs</vh></v>
<v t="zoomq.20130925103854.6443"><vh>_query2dict</vh></v>
<v t="zoomq.20130925103854.6445"><vh>_chkQueryArgs</vh></v>
</v>
<v t="zoomq.20120717112543.5481"><vh>@nosent utility.py</vh>
<v t="zoomq.20120727213305.14698"><vh>&lt;&lt;declarations&gt;&gt;</vh></v>
<v t="zoomq.20150202122015.5"><vh>&lt;&lt;wechat&gt;&gt;</vh>
<v t="zoomq.20150202122015.6"><vh>on_text</vh></v>
</v>
<v t="zoomq.20130927104354.6047"><vh>PUT2SS()</vh></v>
<v t="zoomq.20120727213305.14756"><vh>INIobjSYS()</vh></v>
<v t="zoomq.20130925103854.6439"><vh>ADD4SYS()</vh></v>
<v t="zoomq.20120802192540.7100"><vh>TSTAMP()</vh></v>
<v t="zoomq.20120802192540.5468"><vh>GENID()</vh></v>
<v t="zoomq.20130925103854.6429"><vh>USRID()</vh></v>
<v t="zoomq.20130925103854.6463"><vh>DAMAID()</vh></v>
<v t="zoomq.20120727213305.14699"><vh>INCR4KV()</vh></v>
</v>
</v>
<v t="zoomq.20120723102156.5543" a="E"><vh>web</vh>
<v t="zoomq.20120723102156.5545"><vh>@nosent __init__.py</vh>
<v t="zoomq.20120723102156.5546"><vh>&lt;&lt;declarations&gt;&gt;</vh></v>
<v t="zoomq.20120723102156.5548"><vh>/</vh></v>
<v t="zoomq.20120727213305.14707"><vh>404+各种默认处理</vh></v>
</v>
<v t="zoomq.20120723102156.5561"><vh>@nosent mana4api.py</vh>
<v t="zoomq.20120723102156.5562"><vh>&lt;&lt;declarations&gt;&gt;</vh>
<v t="zoomq.20150203153224.9"><vh>输出模板</vh></v>
<v t="zoomq.20150202122015.9"><vh>&lt;&lt;自制模块&gt;&gt;</vh></v>
<v t="zoomq.20150202122015.8"><vh>build-in</vh></v>
</v>
<v t="zoomq.20130925103854.5007"><vh>CLI 远程管理&gt;&gt;&gt;</vh>
<v t="zoomq.20131007093121.5601"><vh>文章管理</vh>
<v t="zoomq.20150202122015.15"><vh>_load_news(,, multi=False)</vh></v>
<v t="zoomq.20130929203117.3712" a="E"><vh>POST push/p</vh>
<v t="zoomq.20150202122015.19"><vh>&lt;&lt;reset_old&gt;&gt;</vh></v>
<v t="zoomq.20150202122015.14"><vh>&lt;&lt;flush_in&gt;&gt;</vh></v>
</v>
<v t="zoomq.20131010225811.3726"><vh>GET sum/p/:TAG</vh></v>
</v>
<v t="zoomq.20131223160728.4904"><vh>GET info/:UUID</vh></v>
<v t="zoomq.20130927104354.6049"><vh>GET st/kv</vh></v>
<v t="zoomq.20150203153224.10"><vh>GET get/acc</vh></v>
</v>
<v t="zoomq.20130918155053.5760"><vh>GET  /echo</vh></v>
<v t="zoomq.20130918155053.7083"><vh>POST /echo 认证接口</vh>
<v t="zoomq.20150202122015.23"><vh>&lt;&lt;echo CLICK&gt;&gt;</vh></v>
<v t="zoomq.20150202122015.22"><vh>&lt;&lt;echo event&gt;&gt;</vh></v>
<v t="zoomq.20150202122015.7"><vh>&lt;&lt;echo TEXT&gt;&gt;</vh></v>
</v>
<v t="zoomq.20150203153224.13"><vh>_limit_echo_idx()</vh>
<v t="zoomq.20150203153224.14"><vh>&lt;&lt;正常&gt;&gt;</vh></v>
<v t="zoomq.20150203153224.15"><vh>&lt;&lt;压缩&gt;&gt;</vh></v>
</v>
<v t="zoomq.20150202122015.12"><vh>_wx_echo_idx</vh></v>
<v t="zoomq.20150202122015.11"><vh>_wx_echo_cmd</vh></v>
<v t="zoomq.20150202122015.10"><vh>_wx_echo_cnt</vh>
<v t="zoomq.20150907174247.42"><vh>尝试自由索引</vh></v>
</v>
<v t="zoomq.20120727213305.13050"><vh>/api/sysincr</vh></v>
<v t="zoomq.20120727213305.14707"></v>
</v>
<v t="zoomq.20150708235240.7"><vh>@nosent api4devr.py</vh>
<v t="zoomq.20150708235240.8"><vh>&lt;&lt;declarations&gt;&gt;</vh>
<v t="zoomq.20150708235240.9"><vh>输出模板</vh></v>
<v t="zoomq.20150708235240.10"><vh>&lt;&lt;自制模块&gt;&gt;</vh></v>
<v t="zoomq.20150708235240.11"><vh>build-in</vh></v>
</v>
<v t="zoomq.20150708235240.12"><vh>CLI 远程管理&gt;&gt;&gt;</vh>
<v t="zoomq.20150708235240.13"><vh>文章管理</vh>
<v t="zoomq.20150708235240.14"><vh>_load_news(,, multi=False)</vh></v>
<v t="zoomq.20150708235240.15"><vh>POST push/p</vh>
<v t="zoomq.20150708235240.16"><vh>&lt;&lt;reset_old&gt;&gt;</vh></v>
<v t="zoomq.20150708235240.17"><vh>&lt;&lt;flush_in&gt;&gt;</vh></v>
</v>
<v t="zoomq.20150708235240.18"><vh>GET sum/p/:TAG</vh></v>
</v>
<v t="zoomq.20150708235240.19"><vh>GET info/:UUID</vh></v>
<v t="zoomq.20150708235240.20"><vh>GET st/kv</vh></v>
<v t="zoomq.20150708235240.21"><vh>GET get/acc</vh></v>
</v>
<v t="zoomq.20150708235240.22"><vh>GET  /echo</vh></v>
<v t="zoomq.20150708235240.23"><vh>POST /echo 认证接口</vh>
<v t="zoomq.20150708235240.26"><vh>&lt;&lt;echo TEXT&gt;&gt;</vh></v>
<v t="zoomq.20150708235240.24"><vh>&lt;&lt;echo CLICK&gt;&gt;</vh></v>
<v t="zoomq.20150708235240.25"><vh>&lt;&lt;echo event&gt;&gt;</vh></v>
</v>
<v t="zoomq.20150708235240.27"><vh>_wx_echo_cnt</vh></v>
<v t="zoomq.20150708235240.28"><vh>_wx_echo_idx</vh></v>
<v t="zoomq.20150708235240.29"><vh>_limit_echo_idx()</vh>
<v t="zoomq.20150708235240.30"><vh>&lt;&lt;正常&gt;&gt;</vh></v>
<v t="zoomq.20150708235240.31"><vh>&lt;&lt;压缩&gt;&gt;</vh></v>
</v>
<v t="zoomq.20150708235240.32"><vh>_wx_echo_cmd</vh></v>
<v t="zoomq.20150708235240.33"><vh>/api/sysincr</vh></v>
<v t="zoomq.20150708235240.34"><vh>404+各种默认处理</vh></v>
</v>
</v>
<v t="zoomq.20120717112543.5493"><vh>__chaos</vh>
<v t="zoomq.20131007093121.5614"><vh>用户管理</vh>
<v t="zoomq.20131007093121.5615"><vh>GET cli/sum/usr</vh></v>
<v t="zoomq.20131007093121.5616"><vh>PUT cli/acl/usr/&lt;uuid&gt;</vh>
<v t="zoomq.20131007093121.5617"><vh>&lt;&lt;acl bind&gt;&gt;</vh></v>
</v>
<v t="zoomq.20131007093121.5618"><vh>PUT cli/reliv/usr/&lt;uuid&gt;</vh>
<v t="zoomq.20131007093121.5619"><vh>&lt;&lt;reliv del&gt;&gt;</vh></v>
</v>
<v t="zoomq.20131007093121.5620"><vh>DEL cli/del/usr/&lt;uuid&gt;</vh>
<v t="zoomq.20131007093121.5621"><vh>&lt;&lt;usr del&gt;&gt;</vh></v>
</v>
<v t="zoomq.20131007093121.5622"><vh>GET cli/info/usr/&lt;uuid&gt;</vh></v>
<v t="zoomq.20131007093121.5623"><vh>GET cli/list/usr/级别</vh></v>
<v t="zoomq.20131007093121.5624"><vh>GET cli/find/usr/&lt;关键字&gt;</vh></v>
</v>
<v t="zoomq.20120727213305.14743"><vh>&lt;&lt;validate&gt;&gt;</vh></v>
<v t="zoomq.20120727213305.14734"><vh>表单JS验证</vh></v>
<v t="zoomq.20120727213305.14730"><vh>用户crx升级</vh>
<v t="zoomq.20120727213305.14723"><vh>crxup.html</vh></v>
</v>
<v t="zoomq.20130925103854.6418"><vh>POST /echo</vh>
<v t="zoomq.20130925103854.6419"><vh>&lt;&lt;sayeahoo&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.6420"><vh>&lt;&lt;InfoMemberEM&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.6421"><vh>&lt;&lt;InfoMember&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.6422"><vh>&lt;&lt;HELP&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.6423"><vh>&lt;&lt;VERSION&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.6424"><vh>&lt;&lt;SEARCH&gt;&gt;</vh></v>
<v t="zoomq.20130925103854.6425"><vh>&lt;&lt;THANKS&gt;&gt;</vh></v>
</v>
<v t="zoomq.20131225115522.4949"><vh>__choas_POST /echo</vh>
<v t="zoomq.20130923093950.8817"><vh>&lt;&lt;sayeahoo&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.8816"><vh>&lt;&lt;InfoMemberEM&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.8567"><vh>&lt;&lt;InfoMember&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.8563"><vh>&lt;&lt;HELP&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.8564"><vh>&lt;&lt;VERSION&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.8565"><vh>&lt;&lt;SEARCH&gt;&gt;</vh></v>
<v t="zoomq.20130923093950.8566"><vh>&lt;&lt;THANKS&gt;&gt;</vh></v>
</v>
<v t="zoomq.20131011103836.16656"><vh>chaos_CLI.py</vh></v>
</v>
<v t="zoomq.20120723102156.5539"><vh>3party</vh>
<v t="zoomq.20130918155053.8973"><vh>@nosent __init__.py</vh></v>
</v>
<v t="zoomq.20120727213305.14715"><vh>templates</vh>
<v t="zoomq.20120812115324.4334"><vh>&lt;&lt;sspathdefine&gt;&gt;</vh></v>
<v t="zoomq.20120727213305.14728"><vh>BASE组件</vh>
<v t="zoomq.20120710140424.5449"><vh>@nosent base.html</vh>
<v t="zoomq.20120812115324.4334"></v>
<v t="zoomq.20120710140424.5453"><vh>CSS</vh>
<v t="zoomq.20120804110957.4149"><vh>esp. 警告...</vh></v>
<v t="zoomq.20120804110957.4148"><vh>表单相关</vh></v>
<v t="zoomq.20120804110957.4147"><vh>textarea+select</vh></v>
<v t="zoomq.20120727213305.14772"><vh>button</vh></v>
<v t="zoomq.20120727213305.14773"><vh>a as button</vh></v>
<v t="zoomq.20120727213305.14781"><vh>a as btn in &lt;sub&gt;</vh></v>
</v>
<v t="zoomq.20120727213305.14749"><vh>validatious.1.0.5.min.css</vh></v>
</v>
<v t="zoomq.20120727213305.14737"><vh>@nosent manav.html</vh></v>
<v t="zoomq.20120727213305.14705"><vh>@nosent 404.html</vh></v>
</v>
<v t="zoomq.20120727213305.14717"><vh>@nosent index.html</vh></v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="zoomq.20120710140424.5446">150202 改进目标:
    - wechat 类方法
    - TDD
    - PEP8
    - 文档
    - go</t>
<t tx="zoomq.20120710140424.5449">@language html
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh-CN" lang="zh-CN"&gt;
&lt;head&gt;
  &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" &gt;

&lt;&lt;sspathdefine&gt;&gt;

  &lt;title&gt;
{% block title4act %}
{% endblock%}- weknow v13.09.18.2&lt;/title&gt;

{% block headJS %}
{% endblock%}

    &lt;style type="text/css"&gt;
@others
    &lt;/style&gt;
&lt;/head&gt;

{% block body %}
&lt;body&gt;
{% endblock%}

&lt;div id="mainbody"&gt;
    {% block mainbody %}
    {% endblock%}
&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
    &lt;hr/&gt;
    &lt;/div&gt;
&lt;div id="footbar"&gt;
    {% block footernav %}
    {% endblock%}
    |&lt;a href="http://crxdoczh.readthedocs.org/en/latest/5-more/lb4crx/index.html"&gt;帮助&lt;/a&gt;

    &lt;div id="poweredby"&gt;
    &lt;b&gt;powered by:&lt;/b&gt;
        &lt;a href="http://www.python.org/"&gt;Python&lt;/a&gt;
        ,&lt;a href="http://bottle.paws.de/"&gt;Bottle&lt;/a&gt;
        ,&lt;a href="http://webpages.charter.net/edreamleo/front.html"&gt;Leo&lt;/a&gt;
        ,&lt;a href="http://sae.sina.com.cn"&gt;SAE&lt;/a&gt;
        ,&lt;a href="http://www.catb.org/hacker-emblem/"&gt;Hacker&lt;/a&gt;
     &lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;

{% block footerJS %}
{% endblock%}
&lt;/body&gt;
&lt;/html&gt;
</t>
<t tx="zoomq.20120710140424.5453">@language css
body{overflow-x:hidden}
body,img,a,div,span,h1,h2,h3,h4,h5,h6,hr,p,blockquote,dl,dt,dd,ul,ol,li,pre,form,fieldset,legend,button,textarea,th,td,tr,input{
    margin:0;padding:0
}
body { 
    background: #fefefe; color: #343434; 
    margin: 1em; padding: 0; font-size:105%;
}
h1,h2,h3,h4,h5,h6{
    margin:20px 0 10px 0;
    border-radius:5px;
    padding-left: 15px;
}
h1{
    background: #EBFAFF;
}
h2{
    background: #D1F4FF;
}
h3{
    background: #B8EEFF;
}
h4{
    background: #9EE8FF;
}

input,pre,body,button,select,textarea{
    font:14px/28px Segoe UI,Tahoma,Verdana,Arial,Helvetica,sans-serif
}


img { border: none }
hr {
  width : 100%;
  height : 2px;
  background : #efefef;
  border : 1px solid #ddd;
  clear : both;
}
div#poweredby{
  float : right;
}

a {color:#333;}
a:hover {color:blue;}

del {font-size:95%; color:#555;}


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ .btnw */
span.right{
    float:right;
}
.btnw{
    border:1px solid #ccc;
    height:42px;
    display:inline-block;
}
.btn::-moz-focus-inner{border:0}


@others



@-moz-document domain(){
    .btnw button{padding:0 27px 0 27px}
    }








</t>
<t tx="zoomq.20120710140424.5454">@language yaml
---
name: sayeahoo
version: 2

</t>
<t tx="zoomq.20120710140424.5455">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
import sae
#import config
#from bottle import run
import sys
import os.path
app_root = os.path.dirname(__file__)
sys.path.insert(0, app_root)

from web import APP

application = sae.create_wsgi_app(APP)

'''
import sae
import config
from bottle import debug, run
from web import APP

application = sae.create_wsgi_app(APP)


from bottle import *
import sae

APP = Bottle()
application = sae.create_wsgi_app(APP)

@APP.get('/echo')
@APP.get('/echo/')
def echo_wechat():
    print request.query.keys()
    print request.query.echostr
    return request.query.echostr

'''
</t>
<t tx="zoomq.20120710140424.5456">#管理员邮箱列表
ADMIN_EMAIL_LIST = ['zoomquiet+gdg@gmail.com']

@others

</t>
<t tx="zoomq.20120717112543.5481">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
&lt;&lt;declarations&gt;&gt;
from config import CFG
from xsettings import XCFG
#_k4incr = CFG.TOT
KV = CFG.KV #sae.kvdb.KVClient()
BK = CFG.BK

@others

&lt;&lt;wechat&gt;&gt;

if __name__ == '__main__':
    if 2 != len(sys.argv) :
        print '''Usage:
            utility.py test
        '''
    else:
        print "hand testing ..."

</t>
<t tx="zoomq.20120717112543.5493">    '''
    #return "You missed a field."
    #"Hello %s! You uploaded %s (%d bytes)." % (name, filename, len(raw))
    #return "You missed a field."
    #return template('upcrx.tpl')

    #return
    
    #print dir(data.file)
    #print type(data.file)
    # GET某个domain下的object
    #ob = s.get('crx4lb', data.filename)
    #print dir(ob)
    #print "\ttype(ob)", type(ob)
    #sdata = ob.data
    #print sdata
    #AppID = crx_id.GetCRXAppID4upload(data.file)
    #AppID = crx_id.GetCRXAppID4upload(sdata)
    #print 'AppID: %s' % AppID
    #data.file.seek(0)
    #print "data.file.closed", data.file.closed
    #print len(raw)
    raw = ""
    if name and data.file:
        while True:
            datachunk = data.file.read(1024)
            if not datachunk:
                break
            raw = raw + datachunk

        filename = data.filename

    try:
        buf = data.file.read(data.bufsize)
        while True:
            buf = data.file.read(data.bufsize)
            if not buf:
                break
            print data.bufsize
        #outfile.close()
        #return 'Uploaded %s !' % upfile.filename        
    except Exception,e:
        print e.message
        return 'Failed in uploading %s !' % data.filename

    @route('/upload', method='POST')
def do_upload():
    try:
        filename = request.POST.get('Filename')
        root, ext = os.path.splitext(filename)
        assert ext[1:].lower() in ALLOWED_TYPE, "Invalid file type: " + ext
        if not os.path.isdir(UPLOAD_BASE):
            os.makedirs(UPLOAD_BASE)
        filedata = request.POST.get('Filedata')
        assert filedata is not None, "Invalid Upload data."
        with open(os.path.join(UPLOAD_BASE, filename), 'wb') as f:
            shutil.copyfileobj(filedata.file, f, 8192)
    except AssertionError, e:
        abort(403, str(e))
    else:
        return filename

    '''
</t>
<t tx="zoomq.20120723102156.5539">@path 3party</t>
<t tx="zoomq.20120723102156.5541">@path module</t>
<t tx="zoomq.20120723102156.5543">@path web


- passwdaccess: if(path ~ "/up") passwd "up:up"
- passwdaccess: if(path ~ "/mana") passwd "mana:mana"

</t>
<t tx="zoomq.20120723102156.5544">@language py
# -*- coding: utf-8 -*-
&lt;&lt;declarations&gt;&gt;

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 全局值
class Borg():
    '''base http://blog.youxu.info/2010/04/29/borg
        - 单例式配置收集类
    '''
    __collective_mind = {}
    def __init__(self):
        self.__dict__ = self.__collective_mind
    
    &lt;&lt;VERSION&gt;&gt;
    
    &lt;&lt;cfg4Borg&gt;&gt;
    
CFG = Borg()
print CFG.VERSION

</t>
<t tx="zoomq.20120723102156.5545">@language python
@tabwidth -4
# -*- coding: utf-8 -*-

&lt;&lt;declarations&gt;&gt;
from config import CFG
#debug(True)
APP = Bottle()

#APP.mount('/up', __import__('mana4up').APP)
APP.mount('/api', __import__('mana4api').APP)
APP.mount('/wx1', __import__('api4devr').APP)
#APP.mount('/mana', __import__('mana4sys').APP)


@others

if __name__ == '__main__':
    debug(True)
    #0.0.0.0
    run(app, host="0.0.0.0",reloader=True)
</t>
<t tx="zoomq.20120723102156.5546">import sys   
#sys.path.append("..")  

from bottle import *
from bottle import __version__ as bottleVer
from bottle import jinja2_template as template
from config import JINJA2TPL_PATH
TEMPLATE_PATH.insert(0, JINJA2TPL_PATH)

</t>
<t tx="zoomq.20120723102156.5548">#@view('404.html')
@APP.get('/')
def index():
    #return template('index.html')
    return """%s 
    esp. support wechat public No.: PyChina
    ; only API service !-)
    contact: sipport@devrel.info
    """% CFG.VERSION

</t>
<t tx="zoomq.20120723102156.5561">@language py
# -*- coding: utf-8 -*-
&lt;&lt;declarations&gt;&gt;
#print sys.path
from config import CFG
from xsettings import XCFG
KV = CFG.KV #sae.kvdb.KVClient(debug=1)
BK = CFG.BK
debug(True)

APP = Bottle()

@others






</t>
<t tx="zoomq.20120723102156.5562">@others

&lt;&lt;自制模块&gt;&gt;
import yaml

import pyfsm
from pyfsm import state, transition

#from wechat.official import WxApplication, WxRequest, WxTextResponse, WxNewsResponse, WxArticle
from wechat.official import WxApplication
from wechat.official import WxRequest, WxTextResponse
from wechat.official import WxNewsResponse, WxArticle

from bottle import *
from bottle import __version__ as bottleVer
#from bottle import jinja2_template as template


</t>
<t tx="zoomq.20120727213305.13050">@APP.route('/sysincr')
#@APP.route('/&lt;ddd&gt;/sysincr')
def sysincr():
    from utility import INCR4KV as __incr
    #kv = sae.kvdb.KVClient()
    #print  kv.get_info()
    return str(__incr())




</t>
<t tx="zoomq.20120727213305.14698">import os
import sys
import traceback
from copy import deepcopy
from time import time, gmtime, strftime, localtime
import hashlib





</t>
<t tx="zoomq.20120727213305.14699">def INCR4KV():
    '''BASE KVDB make GLOBAL increaser
    '''
    #print CFG.KEY4_incr
    #print None == CFG.KV.get(CFG.KEY4_incr)
    if None == KV.get(CFG.K4D['incr']):
        #print "\t EMPTY?!"
        KV.add(CFG.K4D['incr'], 0)
    else:
        #print "\t incr. BASE HISTORIC"
        KV.set(CFG.K4D['incr'], KV.get(CFG.K4D['incr'])+1)
    return KV.get(CFG.K4D['incr'])





</t>
<t tx="zoomq.20120727213305.14705">@language html
{% extends "base.html" %}

{% block title4act %}
404
{% endblock %}

{% block mainbody %}
&lt;h1&gt;webchat:404(Bottle版) &lt;/h1&gt;

&lt;h2&gt;真心没作呢,介事儿&lt;/h2&gt;

吼这位:-(
&lt;pre&gt;
zoomquiet+lb4crx2srv # gmail.com
&lt;/pre&gt;
{% endblock %}

{% block footernav %}
:-[
{% endblock %}



</t>
<t tx="zoomq.20120727213305.14707">#@view('404.html')
@APP.error(404)
def error404(error):
    return '''


\          SORRY            /
 \                         /
  \    This page does     /
   ]   not exist yet.    [    ,'|
   ]                     [   /  |
   ]___               ___[ ,'   |
   ]  ]\             /[  [ |:   |
   ]  ] \           / [  [ |:   |
   ]  ]  ]         [  [  [ |:   |
   ]  ]  ]__     __[  [  [ |:   |
   ]  ]  ] ]\ _ /[ [  [  [ |:   |
   ]  ]  ] ] (#) [ [  [  [ :===='
   ]  ]  ]_].nHn.[_[  [  [
   ]  ]  ]  HHHHH. [  [  [
   ]  ] /   `HH("N  \ [  [
   ]__]/     HHH  "  \[__[
   ]         NNN         [
   ]         N/"         [
   ]         N H         [
  /          N            \

/                           \

roaring zoomquiet+404@gmail.com
'''
#    return template('404.html')

@APP.route('/favicon.ico')
def favicon():
    abort(204)
    
@APP.route('/static/&lt;filename&gt;')
def server_static(filename):
    return static_file(filename, root='static')
    </t>
<t tx="zoomq.20120727213305.14715">@path templates

#for local debug:
{% set sspath4pic = "http://localhost:8080/stor-stub/pic2lb" %}
{% set sspath4crx = "http://localhost:8080/stor-stub/crx4lb" %}

#for SAE debug:
{% set sspath4pic = "http://lb4crx-pic2lb.stor.sinaapp.com" %}
{% set sspath4crx = "http://lb4crx-crx4lb.stor.sinaapp.com" %}

{% set sspage2crx = "http://lb4crx-page4crx.stor.sinaapp.com" %}
</t>
<t tx="zoomq.20120727213305.14717">@language html
{% extends "base.html" %}

{% block title4act %}
index
{% endblock %}

{% block mainbody %}
&lt;h1&gt;webchat 响应后台(Bottle版) =&lt;/h1&gt;

是也乎;-)


{% endblock %}

{% block footernav %}
:-}
{% endblock %}


</t>
<t tx="zoomq.20120727213305.14723">@language html
{% extends "base.html" %}

{% block title4act %}
up
    {% endblock %}

{% block headJS %}
&lt;script type="text/javascript" language="javascript"
    src="http://zq4org.b0.upaiyun.com/j/prototype.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" language="javascript"
    src="http://zq4org.b0.upaiyun.com/j/scriptaculous.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" language="javascript"
    src="http://zq4org.b0.upaiyun.com/j/jsvalidate_beta04.js"&gt;&lt;/script&gt;
    {% endblock%}

{% block mainbody %}
&lt;h2&gt;猎豹国产原创扩展:上传&lt;/h2&gt;

&lt;form action="/up/crx" method="post" enctype="multipart/form-data" class="validate"&gt;
  名称:&lt;input type="text" name="name" class="required" title="!必填项!"/&gt;
  &lt;br/&gt;
  文件:&lt;input type="file" name="data" class="required" title="!必填项!"/&gt;
  &lt;br/&gt;

&lt;span id="reply_submit" class="btnw"&gt;
    &lt;button type="submit" class="action"&gt;就酱&lt;/button&gt;
&lt;/span&gt;

&lt;/form&gt;
    {% endblock %}

{% block footernav %}
:-]
    {% endblock %}

</t>
<t tx="zoomq.20120727213305.14728">基础模板组
</t>
<t tx="zoomq.20120727213305.14730"></t>
<t tx="zoomq.20120727213305.14734">
{% block headJS %}
&lt;script type="text/javascript" language="javascript" src="http://zq4org.b0.upaiyun.com/j/prototype.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" language="javascript" src="http://zq4org.b0.upaiyun.com/j/scriptaculous.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" language="javascript" src="http://zq4org.b0.upaiyun.com/j/jsvalidate_beta04.js"&gt;&lt;/script&gt;
    {% endblock%}
</t>
<t tx="zoomq.20120727213305.14737">@language html
导航:&lt;a href="/"&gt;首页&lt;/a&gt;
|&lt;a href="/mana"&gt;管理&lt;/a&gt;
|&lt;a href="/api"&gt;接口&lt;/a&gt;


</t>
<t tx="zoomq.20120727213305.14743">@language js
new FormValidator('upcrxform', [{
    name: 'crxname',
    display: 'required',    
    rules: 'required|min_length[4]'
}, {
    name: 'crxfile',
    display: 'required',    
    rules: 'required'
}], function(errors, event) {
    var SELECTOR_ERRORS = $('.error_box'),
        SELECTOR_SUCCESS = $('.success_box');
        
    if (errors.length &gt; 0) {
        SELECTOR_ERRORS.empty();
        
        for (var i = 0, errorLength = errors.length; i &lt; errorLength; i++) {
            SELECTOR_ERRORS.append(errors[i].message + '&lt;br /&gt;');
        }
        
        SELECTOR_SUCCESS.css({ display: 'none' });
        SELECTOR_ERRORS.fadeIn(200);
    } else {
        SELECTOR_ERRORS.css({ display: 'none' });
        SELECTOR_SUCCESS.fadeIn(200);
    }
    
    if (event &amp;&amp; event.preventDefault) {
        event.preventDefault();
    } else if (event) {
        event.returnValue = false;
    }
});

</t>
<t tx="zoomq.20120727213305.14749">@language css

/**
 * TERMS OF USE - Validatious 2.0
 * Open source under the BSD License.
 * Copyright 2008 Christian Johansen.
 * All rights reserved.
 */
.error{color:#900;background:#f8f8f8;}
.error .messages,.error .messages li{list-style:none;}
.error .messages{font-size:1em;padding:.6667em 0 0 1em;}
</t>
<t tx="zoomq.20120727213305.14750">import sys
from os import uname
import datetime

import os.path
app_root = os.path.dirname(__file__)
sys.path.insert(0, os.path.join(app_root, "3party/"))
sys.path.insert(0, os.path.join(app_root, "module/"))
sys.path.insert(0, os.path.join(app_root, "web/"))
#   指定的模板路径
JINJA2TPL_PATH = os.path.abspath(
    os.path.join(
        os.path.dirname(__file__)
        , "templates/")
    )

#import hashlib</t>
<t tx="zoomq.20120727213305.14756">def INIobjSYS(key):
    '''try and init. all kinds of objSYS K/V
    '''    
    if key not in CFG.K4D.keys():
        return None
    else:
        #print CFG.K4D[key]
        if not KV.get(CFG.K4D[key]):
            KV.add(CFG.K4D[key],[])
        return (CFG.K4D[key], KV.get(CFG.K4D[key]))




</t>
<t tx="zoomq.20120727213305.14772">.btnw button {
    font-size:16px;
    text-align:center;
    overflow:visible;
    height:42px;
    padding:0 28px;
    line-height:41px;
    padding-bottom:2px;
    vertical-align:text-bottom;
    
    z-index:1;
    overflow:visible;
    display:inline-block;
    border:0;
    margin:0;
    text-align:center;
    white-space:nowrap;
    cursor:pointer;
    color:#555;
    background-color:#fff;
    background-image:-webkit-gradient(linear,0 0,0 100%,from(#fff),to(#f3f3f3));
    background-image:-moz-linear-gradient(#fff,#f3f3f3);
    background-image:-o-linear-gradient(#fff,#f3f3f3);
    background-image:linear-gradient(#fff,#f3f3f3);
    filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#ffffff',EndColorStr='#f3f3f3');
    zoom:1;
}

.btnw button:hover{
    border-color: #3072b3;
    border-bottom-color: #2a65a0;
    text-decoration: none;
    text-shadow: -1px -1px 0 rgba(0,0,0,0.3);
    color: #fff;
    background-color: #3c8dde;
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#599bdc), to(#3072b3));
    background-image: -moz-linear-gradient(#599bdc, #3072b3);
    background-image: -o-linear-gradient(#599bdc, #3072b3);
    background-image: linear-gradient(#599bdc, #3072b3);
    }

.btnw button:active{
    color:#666;
    background-color:#f3f3f3;
    background-image:-webkit-gradient(linear,0 0,0 100%,from(#f3f3f3),to(#fff));
    background-image:-moz-linear-gradient(#f3f3f3,#fff);
    background-image:-o-linear-gradient(#f3f3f3,#fff);background-image:linear-gradient(#f3f3f3,#fff);
    filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#f3f3f3',EndColorStr='#ffffff')
}

</t>
<t tx="zoomq.20120727213305.14773">.btnw a {
    text-decoration: none;
    font-size:16px;
    text-align:center;
    overflow:visible;
    padding:0 28px;
    height:40px;
    line-height:41px;
    padding-bottom:2px;
    vertical-align:text-bottom;
    
    z-index:1;
    overflow:visible;
    display:inline-block;
    border:0;
    margin:0;
    text-align:center;
    white-space:nowrap;
    cursor:pointer;
    color:#555;
    background-color:#fff;
    background-image:-webkit-gradient(linear,0 0,0 100%,from(#fff),to(#f3f3f3));
    background-image:-moz-linear-gradient(#fff,#f3f3f3);
    background-image:-o-linear-gradient(#fff,#f3f3f3);
    background-image:linear-gradient(#fff,#f3f3f3);
    filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#ffffff',EndColorStr='#f3f3f3');
    zoom:1;
}

.btnw a:hover{
    border-color: #3072b3;
    border-bottom-color: #2a65a0;
    text-decoration: none;
    text-shadow: -1px -1px 0 rgba(0,0,0,0.3);
    color: #fff;
    background-color: #3c8dde;
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#599bdc), to(#3072b3));
    background-image: -moz-linear-gradient(#599bdc, #3072b3);
    background-image: -o-linear-gradient(#599bdc, #3072b3);
    background-image: linear-gradient(#599bdc, #3072b3);
    }

.btnw a:active{
    color:#666;
    background-color:#f3f3f3;
    background-image:-webkit-gradient(linear,0 0,0 100%,from(#f3f3f3),to(#fff));
    background-image:-moz-linear-gradient(#f3f3f3,#fff);
    background-image:-o-linear-gradient(#f3f3f3,#fff);background-image:linear-gradient(#f3f3f3,#fff);
    filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#f3f3f3',EndColorStr='#ffffff')
}
</t>
<t tx="zoomq.20120727213305.14781">#iterm sub{
    float: right; padding: 0; margin: 5px 0 0 0; 
    border-bottom: 1px dotted #ccc;
    height:22px; line-height:22px; 
    overflow:hidden;
}

#iterm .btnwa{
    display:inline-block;
    border:1px solid #ccc;
    height:22px;
}
#iterm .btnwa a {
    text-decoration: none;
    font-size:12px;
    text-align:center;
    overflow:visible;
    padding:0 18px;
    height:22px;
    line-height:22px;
    vertical-align:text-bottom;

    z-index:1;
    display:inline-block;
    border:0;
    text-align:center;
    white-space:nowrap;
    cursor:pointer;
    color:#555;
    background-color:#fff;
    background-image:-webkit-gradient(linear,0 0,0 100%,from(#fff),to(#f3f3f3));
    background-image:-moz-linear-gradient(#fff,#f3f3f3);
    background-image:-o-linear-gradient(#fff,#f3f3f3);
    background-image:linear-gradient(#fff,#f3f3f3);
    filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#ffffff',EndColorStr='#f3f3f3');
    zoom:1;
}

#iterm .btnwa a:hover{
    border-color: #3072b3;
    border-bottom-color: #2a65a0;
    text-decoration: none;
    text-shadow: -1px -1px 0 rgba(0,0,0,0.3);
    color: #fff;
    background-color: #3c8dde;
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#599bdc), to(#3072b3));
    background-image: -moz-linear-gradient(#599bdc, #3072b3);
    background-image: -o-linear-gradient(#599bdc, #3072b3);
    background-image: linear-gradient(#599bdc, #3072b3);
    }

#iterm .btnwa a:active{
    color:#666;
    background-color:#f3f3f3;
    background-image:-webkit-gradient(linear,0 0,0 100%,from(#f3f3f3),to(#fff));
    background-image:-moz-linear-gradient(#f3f3f3,#fff);
    background-image:-o-linear-gradient(#f3f3f3,#fff);background-image:linear-gradient(#f3f3f3,#fff);
    filter:progid:DXImageTransform.Microsoft.gradient(startColorStr='#f3f3f3',EndColorStr='#ffffff')
}
</t>
<t tx="zoomq.20120802192540.5468">def GENID(obj, name="NIL"):
    '''通用ID生成器:
        yymmddHHMMSS+5位微秒+对象鍵3位+全局序号
        - 对分标签的文章分级选择,包含额外标识信息:
            - dd_ 前缀就是分类 tag
            - __** 后缀就是指定的文章编号
    '''
    #timestamp = TSTAMP()
    #tot = INCR4KV()
    #sha1name = hashlib.sha1(name).hexdigest()
    if "NIL" == name:
        return CFG.GOBJMAP[obj].format(tot = INCR4KV()
            , timestamp = TSTAMP()
            , name = name)
    elif "menu" == name:
        # '%s(menu)_%(timestamp)s_PUB%(tot)d'
        #print obj, name
        return CFG.GOBJMAP['menu'].format(tot = INCR4KV()
            , timestamp = TSTAMP()
            , menu = obj)
    else:
        return None


</t>
<t tx="zoomq.20120802192540.7100">def TSTAMP():
    '''通用时间戳生成器:
        yymmddHHMMSS+5位微秒
        e.g.
        12080110561431076
    '''
    date = strftime("%y%m%d%H%M%S", localtime())
    mms = "%.5f"% time()
    ms = mms[-5:]
    return "%s%s"% (date, ms)




</t>
<t tx="zoomq.20120804110957.4147">/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ by 42qu.com 
input,button,select,textarea{font-size:16px;line-height:28px}

*/
input,button,select,textarea{
    font-size:14px;line-height:28px
}
div{cursor:default}

input{  
    font-size:22px;
    line-height:36px;
    height:42px;
    padding:4px 3px;
    border:1px solid #ddd;
    width:27em;
}
input.checkbox{
    font-size:22px;
    line-height:24px;
    height:24px;
    width:auto;

}  

#optradios input{
    font-size:18px;line-height:22px;height:26px;
    padding:0px;
    border:1px solid #ddd;
    width:1em;
}
    
select{
    font-size:16px;line-height:18px;
    padding:8px;
    text-align:center;border:1px solid #ccc;
    margin-right:8px;
    width:120px;
}

textarea{
    font-size:22px;
    overflow:auto;resize:none;
    border:1px solid #ccc;
    padding:4px 3px;
    margin:0;
    width:27em;
}
</t>
<t tx="zoomq.20120804110957.4148">ul li {font-size:120%;
    line-height: 36px;
    border-top:1px dotted #aaa;
    width:98%;
    list-style-type:none;
    padding: 5px 0px 0px 10px;
}
ul li.textarea3 {
    height: 108px;
    border: 0px dotted #930;
}
ul li.textarea1 {
    height: 50px;
    border: 0px dotted #930;
}
.even{
    background: #FFF4DB;
}
ul.asform li{
    display:inline-block; 
    vertical-align:top; 
    border-top:0px dotted #aaa;
}
.leftlabel{
    float: left;
}
.rightinput{
    float: right;
}
span.label{
    display:inline-block; 
    border: 1px solid #777;
    width:7em;
    padding: 5px;
    text-align:right;
}

ol li {font-size:120%;
    line-height: 24px;
    border-bottom:1px dotted #aaa;
    width:90%;
    list-style-type:none;
    margin-left: 20px;
}

sub,sup {font-size:10px; }
fieldset sub{
    color:#999;
}


fieldset{
    margin-top: 10px;
    padding: 20px;
    border-radius: 0px 15px 0px 15px;
    box-shadow: 3px 3px 4px #ddd;
}
fieldset i{
    font-size: 70%;
    color: #787;
    margin-top: 10px;
    line-height:36px;
}

</t>
<t tx="zoomq.20120804110957.4149">b.alert{
    font-size: 150%;
    color: #930;
}


pre {
    font-weight：lighter;
    font-size: 80%;
    border: 4px dotted #fefefe;
    background : #ededed;
    padding: 5px;
    border-radius: 0px 15px 0px 15px;
    box-shadow: 3px 3px 4px #ddd;
}

pre.desc {
    font-size: 14px;
    border: 2px dotted #ddd;
    background : #fefefe;
    padding: 10px;
    border-radius: 15px 0px 15px 0px;
    width:70%;
    display:inline-block;
}
</t>
<t tx="zoomq.20120812115324.4334">{% set sspath4pic = "http://lb4crx-pic2lb.stor.sinaapp.com" %}
{% set sspath4crx = "http://lb4crx-crx4lb.stor.sinaapp.com" %}
</t>
<t tx="zoomq.20120820121523.7422">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
&lt;&lt;declarations&gt;&gt;
from config import CFG
KV = CFG.KV
from xsettings import XCFG

@others

</t>
<t tx="zoomq.20120820121523.7423">'''base: ms4py / bottle-wiki / source — Bitbucket
	https://bitbucket.org/ms4py/bottle-wiki/src/1586473a6ce1/auth.py
'''
import sys
from time import time, gmtime, strftime, localtime
import base64
import urllib2 as urilib
from base64 import urlsafe_b64encode

from hashlib import md5
from hashlib import sha256
from functools import partial

from bottle import request, HTTPError

</t>
<t tx="zoomq.20120820121523.7424">def check_login(username, password, fullpath):
    '''根据用户名,以及口令:
        - 明确是否登录
        - 明确是否有当前级别的权限!
    '''
    pw_hash = sha256_uhex(password)
    suname = sha256_uhex(username)
    usrid = "%s%s"% (CFG.PREUID, suname)
    crtusr = KV.get(usrid)
    #print fullpath.split("/")[1]
    #print type(CFG.LEVEL4USR[fullpath.split("/")[1]])
    #print type(crtusr['level'])
    if crtusr:
        crtPathLevel = CFG.LEVEL4USR[fullpath.split("/")[1]]
        if str(crtPathLevel) == str(crtusr['level']):
            print "'%s' had crt. path right ;-)"% username
            return True
        else:
            print "'%s' disallow crt. path ;-("% username
            return False
    else:
        print "'%s' NOT exist!"% username
        return False
    '''
    #print fullpath.split("/")[1]
    print CFG.LEVEL4USR[fullpath.split("/")[1]]
    usr = 1#KV.get("usr:%s"% str(sha256_uhex(username.decode('utf-8'))))
    if usr is None:
        return False
    #return usr.password == pw_hash
    return 1
    '''

</t>
<t tx="zoomq.20120820121523.7425">def auth_required(check_func=check_login, realm='bottle-authentication'):
    """
    Decorator for basic authentication. 
    
    "check_func" has to be a callable object with two 
    arguments ("username" and "password") and has to return 
    a bool value if login was sucessful or not.
    """
    def decorator(view):
        def wrapper(*args, **kwargs):
            try:
                user, password = request.auth
            except (TypeError, AttributeError):
                # catch AttributeError because of bug in bottle
                auth = False
            else:
                auth = check_login(user, password, request.fullpath)
                #print "\t path: ", request.keys()
                #print request.fullpath
            if auth:
                return view(*args, **kwargs)
            return HTTPError(401, 'Access denied!', 
                header={'WWW-Authenticate': 'Basic realm="%s"' % realm})
        return wrapper
    return decorator

</t>
<t tx="zoomq.20120820121523.7426">def sha256_uhex(data):
    ''' Generates unicode hex value of given data with SHA-256. '''
    return str(unicode(sha256(data).hexdigest()))
</t>
<t tx="zoomq.20130918155053.5760">@APP.get('/echo')
@APP.get('/echo/')
def echo_wechat():
    '''wechat app token echo
    '''
    #print request.query.keys()
    #print request.query.echostr
    #print request.query_string
    #print dir(BaseRequest.query_string)
    return request.query.echostr
    #return app = WxApplication.process(request.query, None)
    

'''
def wechat(request):
    app = EchoApp()
    result = app.process(request.GET, request.body, token='your token')
    return HttpResponse(result)
'''

</t>
<t tx="zoomq.20130918155053.7083">@APP.post('/echo/')
@APP.post('/echo')
def wechat_post():
    # usage jeff SDK for wechat...
    #print request.query
    #print request.query_string
    #print request.forms
    if CFG.AS_SAE:
        #wxa = WxApplication.process(request.GET, request.body)
        wxa = WxApplication(token=XCFG.TOKEN)
        chkwx = wxa.is_valid_params(request.query)
        if not chkwx:
            return None
    else:
        print "Debugging localhost..."
    ## 注意! 从公众号来的消息和订阅号完全不同的,需要另外解析!
    print "request.forms.keys()[0]\t\n", request.forms.keys()[0]
    wxreq = WxRequest(request.forms.keys()[0])
    if 'text' == wxreq.MsgType:
        &lt;&lt;echo TEXT&gt;&gt;
    elif 'event' == wxreq.MsgType:
        &lt;&lt;echo event&gt;&gt;
    elif 'CLICK' == wxreq.MsgType:
        &lt;&lt;echo CLICK&gt;&gt;
    return None
    



</t>
<t tx="zoomq.20130918155053.7084">&lt;&lt;ALIAS&gt;&gt;
# for CLI local usage
&lt;&lt;XML模板&gt;&gt;

@others



</t>
<t tx="zoomq.20130918155053.8973">@language python
@tabwidth -4


</t>
<t tx="zoomq.20130923093950.3647">import sae.kvdb
KV = sae.kvdb.KVClient()
#   系统索引名-UUID 字典; KVDB 无法Mongo 样搜索,只能人工建立索引
K4D = {'incr':"SYS_TOT"     # int
    ,'acc':"SYS_wx_token"   # {"access_token":"ACCESS_TOKEN"
                            #  ,"expires_in":time.time()+有效时间 }
    #,'p':"SYS_pubs_ALL"    # [] 所有 文章 (包含已经 del 的)
    ,'00':"SYS_00_ALL"     # 特殊含义索引定义
    ,'11':"SYS_11_ALL"     # [] 有效栏目文章 (不含已经 del 的)
    ,'12':"SYS_12_ALL"     # [] 有效栏目文章 (不含已经 del 的)
    ,'13':"SYS_13_ALL"     # [] 有效栏目文章 (不含已经 del 的)
    ,'14':"SYS_14_ALL"     # [] 有效栏目文章 (不含已经 del 的)
    ,'15':"SYS_15_ALL"     # [] 有效栏目文章 (不含已经 del 的)
    ,'21':"SYS_21_ALL"     # [] 有效栏目文章 (不含已经 del 的)
    ,'22':"SYS_22_ALL"     # [] 有效栏目文章 (不含已经 del 的)
    ,'23':"SYS_23_ALL"     # [] 有效栏目文章 (不含已经 del 的)
    ,'24':"SYS_24_ALL"     # [] 有效栏目文章 (不含已经 del 的)
    ,'25':"SYS_25_ALL"     # [] 有效栏目文章 (不含已经 del 的)
    ,'31':"SYS_31_ALL"     # [] 有效栏目文章 (不含已经 del 的)
    ,'32':"SYS_32_ALL"     # [] 有效栏目文章 (不含已经 del 的)
    ,'33':"SYS_33_ALL"     # [] 有效栏目文章 (不含已经 del 的)
    ,'34':"SYS_34_ALL"     # [] 有效栏目文章 (不含已经 del 的)
    ,'35':"SYS_35_ALL"     # [] 有效栏目文章 (不含已经 del 的)
    ,'36':"SYS_36_ALL"     # [] 有效栏目文章 (不含已经 del 的)
    ,'37':"SYS_37_ALL"     # [] 有效栏目文章 (不含已经 del 的)
    #,'e':"SYS_eves_ALL"     # [] 所有 活动 (包含已经 del 的)
    ,'his':"SYS_node_HIS"   # [] 所有 节点的K索引 (包含已经 del/覆盖 的)
}

&lt;&lt;UUID&gt;&gt;

#KEY4_incr = K4D['incr']
for k in K4D:
    if None == KV.get(K4D[k]):
        if 'incr' == k:
            KV.add(K4D[k], 0)
        else:
            KV.add(K4D[k], [])
'''
        elif 'fw' == k:
            KV.add(K4D[k], {'sequence':[]})
'''

&lt;&lt;CONTENT&gt;&gt;
&lt;&lt;HISTORIC&gt;&gt;

</t>
<t tx="zoomq.20130923093950.5395"># 文章索引 ESSAY_TAG_ID+code &gt;&gt; 文章索引号
K4WD = {"uuid":""
    , "his_id":""   # 更新戮
    , "del":0
    , "type":"txt"  # 信息类型 txt|uri|pic
    , "tag":"ot"
    , "code":""     # 文章,分类序号
    , "news":[]     # 支持最多10个的图文
    }
K4new = {'title':''
    , "desc":""     # 解释
    , "pic":''
    , "uri":""
    }
    
    


</t>
<t tx="zoomq.20130923093950.5396">#   历史操作 键-名字典
K4H = {'C':"Create"
    ,'D':"Delete"
    ,'U':"Update"
    }
#'uuid':""     # 历史版本扩展ID
objHis = {'hisobj':""
    ,'actype':"..."     # 操作类型C|D|U~ Create|Delet|Update = 创建|删除|更新
    ,'dump':''        # 数据集
    }


</t>
<t tx="zoomq.20130923093950.8563">
return __echo_txt(fromUser, toUser, CFG.TXT_HELP)

return None
</t>
<t tx="zoomq.20130923093950.8564">return __echo_txt(fromUser, toUser, CFG.VERSION)

return None
</t>
<t tx="zoomq.20130923093950.8565">item_count = 1
title = "是也乎"
description = "G术图书:5 超级聊天术"
picurl = "http://mmsns.qpic.cn/mmsns/LkTfzZ1ialTo0ibaAicYJwQkqXyEJXEdhnhpZOD2PlnX69w3ESxibQ3vfw/0"
url = "http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5Mjk3MDI2MA==&amp;appmsgid=10000132&amp;itemidx=1&amp;sign=dcb49b00b0773aee85c67810385a1b19#wechat_redirect"
items = CFG.TPL_ITEM% locals()
print CFG.TPL_URIS% locals()
return CFG.TPL_URIS% locals()


return None
</t>
<t tx="zoomq.20130923093950.8566">return __echo_txt(fromUser, toUser, CFG.TXT_WELCOME)

return None
</t>
<t tx="zoomq.20130923093950.8567">if "" == crt_usr['em']:
    # 1st ping
    return __echo_txt(fromUser, toUser, CFG.TXT_NEW_USR)
else:
    # had reg.
    return __echo_txt(fromUser, toUser, CFG.TXT_CRT_EM% crt_usr['em'])


return None

'''Traceback (most recent call last):
  File "/data1/www/htdocs/466/weknow/2/bottle.py", line 764, in _handle
    return route.call(**args)
  File "/data1/www/htdocs/466/weknow/2/bottle.py", line 1575, in wrapper
    rv = callback(*a, **ka)
  File "/data1/www/htdocs/466/weknow/2/web/mana4api.py", line 68, in wechat_post
    if 0 == len(usr):
TypeError: object of type 'generator' has no len() yq34 
'''

</t>
<t tx="zoomq.20130923093950.8816">em = __Content[3:]
print em
if " " in em:
    print "canceled +"
    em = "+".join(em.split())
#return None
crt_usr['em'] = em
KV.replace(usrs[0][0] , crt_usr)
print KV.get(usrs[0][0])

return __echo_txt(fromUser, toUser, CFG.TXT_CRT_EM% em)

return None


</t>
<t tx="zoomq.20130923093950.8817">print KV.get_info()
return __echo_txt(fromUser, toUser, KV.get_info())


#return None


</t>
<t tx="zoomq.20130923093950.8818">#__alltags = ''.join(ESSAY_TAG_KEYS)
#print __alltags
CMD_TPLS = {'hH?': 'TXT_HELP'
    , 'vVlog':'TXT_VER'
    , 'sS':'TXT_PLS_TAG'
    }
CMD_ALIAS=('h', 'H', 'help', '?'    # 帮助
    , 'v', 'V', 'version', 'log'    # 版本
    , 's', 'S'                      # 文章检索
    #   隐藏功能:::
    #, 'st', 'stat'                  # 系统状态
    #, 'nn'                          # 牛妞日记
    )

</t>
<t tx="zoomq.20130925103854.4951">APIPRE = "/cli" #% _API_ROOT
STLIMI = 4.2    # 请求安全时限(秒)
SECURE_ARGS = ('appkey', 'ts', 'sign')
CLI_MATTERS = {     # 命令行响应方式速查字典
    "his/last":   "GET"       # 最后一次节点(任意)修订
    , "echo":       "GET"       # 模拟wechat 问答
    , "subs":       "GET"       # 模拟wechat 关注
    , "clic":       "GET"       # 模拟wechat 菜单
    , "info":       "GET"       # 查阅 指定 信息
    , "get/acc":    "GET"       # 查阅 指定 信息
    &lt;&lt;CLI4usr&gt;&gt;
    &lt;&lt;CLI4pub&gt;&gt;
    
    , "st/kv":      "GET"       # 查阅 KVDB 信息
    
    &lt;&lt;CLI4sys&gt;&gt;
    &lt;&lt;CLI4wx&gt;&gt;    
    }

CLI_URI = {     # 命令行 请求外部系统URI 速查字典
    "wx/t":     ("api.weixin.qq.com"
        , "/cgi-bin/token?grant_type=client_credential&amp;appid=%(appid)s&amp;secret=%(secret)s"
        )     # 获取 token
    , "wx/ls":  ("api.weixin.qq.com"
        , "/cgi-bin/user/get?access_token=%(token)s"
        )     # 获取关注列表
    , "wx/usr": ("api.weixin.qq.com"
        , "/cgi-bin/user/info?access_token=%(token)s&amp;openid=%(openid)s"
        )     # 获取成员信息
    , "wx/msg": ("api.weixin.qq.com"
        , "/cgi-bin/message/custom/send?access_token=%(token)s"
        , "POST")     # 发送消息
    }
#https://api.weixin.qq.com/cgi-bin/message/custom/send?access_token=ACCESS_TOKEN

LEVEL4USR = {"mana":0
    , "up":1
    , "api":2
    }


</t>
<t tx="zoomq.20130925103854.4957">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
#!/usr/bin/env python
&lt;&lt;docopt&gt;&gt;
&lt;&lt;declarations&gt;&gt;
AS_LOCAL = "http://127.0.0.1:8080/api"

@others

if __name__ == '__main__':
    '''为了简化 后台控制的界面开发,快速实现远程控制:
        - 通过 RESTful 接口,从本地使用工具脚本实施管理事务!
    主要功能:
        - 模拟微信的服务端消息转发,进行消息应答测试
        - (模拟短信客户端向微信服务端发送消息,驱动真实测试)
        - 自动生成含安全认证的网络请求,将各种操作指令格式化为http 请求,并自动发送
        ...
    '''
    arguments = docopt(__doc__, version='lbTCLI v13.09.03b')
    metter = arguments.get('&lt;matter&gt;')
    debug = arguments.get('--debug')
    sets = arguments.get('&lt;sets&gt;')
    #print sets
    smart_rest(metter, sets)
    #_rest_main(method, uri, args)
</t>
<t tx="zoomq.20130925103854.4958">"""CLI for WeKnow.
Usage:
  CLI.py [--debug] &lt;matter&gt; [&lt;sets&gt;]

Options:
  -h --help     Show this screen.
  -V --version  Show version.
  -D --debug    对本地系统测试时专用参数
  &lt;matter&gt;      事务URI
  &lt;sets&gt;        数据设定

e.g:
  一般形式::
  $ python CLI.py 事务指令 [可能的值设定 set=** 形式]
  详细操作::
  echo set=i                模拟微信的消息交互
  subs set=subscribe|unsubscribe
                            模拟微信的关注事件
  clic set=KEY              模拟微信的菜单交互
  info/:UUID                查阅指定 信息
  st/kv     查询 KVDB 整体现状
  sum/p/:TAG 综合 分类文章 信息现状
  get/acc     查询 access_token
  
  !!! 小心:大规模数据I/O操作 !!!
  push/p yaml=path/2/x.yaml 提交文章数据
"""

</t>
<t tx="zoomq.20130925103854.4959">import sys
import os
import base64
from subprocess import Popen
from time import time, gmtime, strftime, localtime
import httplib, urllib
import urllib2
# 打开urllib2的debug开关
urllib2.install_opener(urllib2.build_opener(urllib2.HTTPSHandler(1)))
import json

from docopt import docopt

from config import CFG
from xsettings import XCFG
from module.auth import _genQueryArgs, _genArgsStr
</t>
<t tx="zoomq.20130925103854.4960">def _rest_main(method, uri, args, host=AS_LOCAL):
    '''接受事务指令+数据, 合理拼成 hhtp 命令行:
        - GET/DELETE 时将参数拼为统一间隔字串
        - PUT/POST 时提交唯一数据,同 GET 时的参数字串结构
        - 注意! 参数的次序必须固定: 
            - appkey-&gt;ts-&gt;[q]-&gt;sign
            - appkey=***&amp;ts=***&amp;sign=***
            - 整体作base64.urlsafe_b64encode()包裹
    '''
    if 'PUT' == method: 
        &lt;&lt;PUT&gt;&gt;
    elif 'POST' == method:
        &lt;&lt;POST&gt;&gt;
    elif 'HTTPS' == method:
        &lt;&lt;HTTPS&gt;&gt;
    else:
        #print uri
        if "echo" == uri:
            &lt;&lt;echo matters&gt;&gt;
        elif "subs" == uri:
            &lt;&lt;subs matters&gt;&gt;
        elif "clic" == uri:
            &lt;&lt;clic matters&gt;&gt;
        else:
            &lt;&lt;GET DEL&gt;&gt;
    print cmd
    Popen(cmd, shell=True, close_fds=True)
    #print p.stderr

    </t>
<t tx="zoomq.20130925103854.4961">def smart_rest(matter, sets):
    '''确保所有操作元语为 两节,其它作为附加参数...
    '''
    #print "matter", matter
    if matter in ["echo", "subs", "clic"]:
        _rest_main(CFG.CLI_MATTERS['echo'], matter, sets)
    else:
        cmd = matter
        mess = matter.split("/")
        # 服务端的指令只有两节,其它的是动态数据,所以,进行净化
        if 2 &lt; len(mess):
            matter = "/".join(mess[:-1])
        elif 'info' == mess[0]:
            matter = mess[0]
        
        # 然后进行分拣 协议情况生成请求
        if matter in CFG.CLI_MATTERS.keys():  
            method = CFG.CLI_MATTERS[matter]      
            if debug:
                _rest_main(method, cmd, sets)
            else:
                _rest_main(method, cmd, sets, host = XCFG.TO_SAE)
        else:
            print "smart_rest()\n\t参数错误,请使用 -h 参阅手册..."



</t>
<t tx="zoomq.20130925103854.5007"># echo for RESTful remote actions
'''
- 全部基于: `/api/cli` 前缀
    - 版本区隔为: `/api/v2/cli` 前缀
- 签名检验
- 时间检验(4.2秒以内, 并发不得超过 `N` 次)
'''

</t>
<t tx="zoomq.20130925103854.6406">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
import sys   
#sys.path.append("..")  


</t>
<t tx="zoomq.20130925103854.6418">@APP.post('/echo')
@APP.post('/echo/')
def wechat_post():
    #print request.forms.keys()[0]
    xml = etree.XML(request.forms.keys()[0])
    fromUser = xml.findtext("ToUserName")
    toUser = xml.findtext("FromUserName")
    sha1_name = hashlib.sha1(toUser).hexdigest()
    pre_uuid = "u:%s"% sha1_name
    __MsgType = xml.findtext("MsgType")
    Content = xml.findtext("Content") #.encode('utf8')
    if isinstance(Content, unicode):
        print "可能是中文"
        #__Content = Content.encode('utf-8')
    else:
        __Content = Content
        print __Content #.encode('utf8')

        if "text" == __MsgType:
            #print CFG.CMD_ALIAS['help']
            if __Content in CFG.CMD_ALIAS['help'] :
                &lt;&lt;HELP&gt;&gt;
            elif __Content in CFG.CMD_ALIAS['version']:
                &lt;&lt;VERSION&gt;&gt;
            elif __Content in CFG.CMD_ALIAS['info']:
                &lt;&lt;InfoMember&gt;&gt;
            elif "em" in __Content.split(":"):
                &lt;&lt;InfoMemberEM&gt;&gt;
            elif __Content in CFG.CMD_ALIAS['search']:
                &lt;&lt;SEARCH&gt;&gt;
            elif __Content in CFG.CMD_ALIAS['sayeahoo']:
                &lt;&lt;sayeahoo&gt;&gt;
            else:
                &lt;&lt;THANKS&gt;&gt;
        
    







</t>
<t tx="zoomq.20130925103854.6419">print KV.get_info()
return __echo_txt(fromUser, toUser, KV.get_info())


#return None


</t>
<t tx="zoomq.20130925103854.6420">em = __Content[3:]
print em
if " " in em:
    print "canceled +"
    em = "+".join(em.split())
#return None
usrs = [(u[0], u[1]) for u in KV.get_by_prefix(pre_uuid)]
member = usrs[0][1] 
member['em'] = em
KV.replace(usrs[0][0] , member)
print KV.get(usrs[0][0])

return __echo_txt(fromUser, toUser, CFG.TXT_CRT_EM% em)

return None


</t>
<t tx="zoomq.20130925103854.6421">usrs = [(u[0], u[1]) for u in KV.get_by_prefix(pre_uuid)]
print usrs
print "CFG.TOT ", CFG.TOT
if 0 == len(usrs):
    # 1st ping
    print "sha1_name: ", sha1_name
    uuid = GENID('usr', name = sha1_name)
    new_usr = deepcopy(CFG.objUSR)
    new_usr['his_id'] = GENID('his')
    new_usr['pp'] = toUser
    new_usr['lasttm'] = time.time()
    print uuid, new_usr
    KV.add(uuid, new_usr)
    return __echo_txt(fromUser, toUser, CFG.TXT_NEW_USR)
else:
    # had reg.
    member = usrs[0][1]
    if "" == member['em']:
        return __echo_txt(fromUser, toUser, CFG.TXT_PLS_EM)
    else:
        return __echo_txt(fromUser, toUser, CFG.TXT_CRT_EM% member['em'])


return None

'''Traceback (most recent call last):
  File "/data1/www/htdocs/466/weknow/2/bottle.py", line 764, in _handle
    return route.call(**args)
  File "/data1/www/htdocs/466/weknow/2/bottle.py", line 1575, in wrapper
    rv = callback(*a, **ka)
  File "/data1/www/htdocs/466/weknow/2/web/mana4api.py", line 68, in wechat_post
    if 0 == len(usr):
TypeError: object of type 'generator' has no len() yq34 
'''
'''
objUSR={"uuid":""            
    , "his_id":""   # 更新戮
    , "del":0
    , "fsm":""      # 有限状态机 当前状态
    , "acl":1       # ban:0 usr:1 staff:10 api:42 admin:100
    , "desc":""     # 解释
    , "pp":''       # Passport 
    , "nm":""       # NickName "Zoom.Quiet"
    , 'em':''       #'zhouqi@ijinshan.com',
    , "lasttm": ''  #"2013-07-05 19:01:33",
    }    
'''


</t>
<t tx="zoomq.20130925103854.6422">
return __echo_txt(fromUser, toUser, CFG.TXT_HELP)

return None
</t>
<t tx="zoomq.20130925103854.6423">return __echo_txt(fromUser, toUser, CFG.VERSION)

return None
</t>
<t tx="zoomq.20130925103854.6424">item_count = 1
title = "是也乎"
description = "G术图书:5 超级聊天术"
picurl = "http://mmsns.qpic.cn/mmsns/LkTfzZ1ialTo0ibaAicYJwQkqXyEJXEdhnhpZOD2PlnX69w3ESxibQ3vfw/0"
url = "http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5Mjk3MDI2MA==&amp;appmsgid=10000132&amp;itemidx=1&amp;sign=dcb49b00b0773aee85c67810385a1b19#wechat_redirect"
items = CFG.TPL_ITEM% locals()
print CFG.TPL_URIS% locals()
return CFG.TPL_URIS% locals()


return None
</t>
<t tx="zoomq.20130925103854.6425">pass
#return __echo_txt(fromUser, toUser, CFG.TXT_WELCOME)

return None
</t>
<t tx="zoomq.20130925103854.6429">def USRID(Passpord):
    '''base Passpord make UUID
    '''
    sha1_name = hashlib.sha1(Passpord).hexdigest()
    return 'u_%s'% sha1_name



</t>
<t tx="zoomq.20130925103854.6439">def ADD4SYS(k4sys, uuid):
    '''try safty insert SOMETHING to SYS:** K/V
    only dm|m|p means dama|member|paper
    '''
    uuid_idx = KV.get(CFG.K4D[k4sys])
    #print "listobj:\t", uuid_idx
    if None == uuid:
        appended = uuid_idx
    elif uuid in uuid_idx:
        appended = uuid_idx
    else:
        # 防止意外重复
        uuid_idx.append(uuid)
        appended = list(set(uuid_idx))
        KV.replace(CFG.K4D[k4sys],  appended)
    return (CFG.K4D[k4sys], appended)



</t>
<t tx="zoomq.20130925103854.6443">def _query2dict(qstr):
    q_dict = {}
    for q in base64.urlsafe_b64decode(qstr).split("&amp;"):
        item = q.split("=")
        q_dict[item[0]] = item[1]
    return q_dict
</t>
<t tx="zoomq.20130925103854.6445">def _chkQueryArgs(api_matter, q, rest_method="GET"):
    '''单向加密服务端核查:
        - [MatterURI] ~= cli/usr/info/&lt;uuid&gt; 不必包含http 域名部分
        - sign 制作:
            - GET 时将[MatterURI]/appkey_值--ts_值 参数字串缀上密文 md5 成 
            - POST 时 [MatterURI]为uri 提交时数据拼为仿GET字串 md5 成
        - 服务端使用相同算法,生成 sign 对比,并明确请求在 CFG.STLIMI 秒之内发生        
        - 注意! 参数的次序必须固定: 
            - appkey-&gt;ts-&gt;[q]-&gt;sign
            - appkey=***&amp;ts=***&amp;sign=***
            - 整体作base64.urlsafe_b64encode()包裹
        - GET/DELETE 时将参数拼为统一联合字串
        - PUT/POST 时提交唯一数据,同 GET 时的参数字串结构
    '''
    matter = api_matter #"%s/%s"% (CFG.APIPRE, api_matter)
    args = []
    args.append(("appkey", q['appkey'] ))
    args.append(("ts", q['ts'] ))
    #print rest_method
    if rest_method in ['GET', 'DELETE']:
        sign_base_string = _genArgsStr(matter, args)
        re_sign = md5(sign_base_string + XCFG.SECRET).hexdigest()
        chk_sign = (re_sign == q['sign'])
        chk_time = (CFG.STLIMI&gt;float("%.3f" % (time())) - float(q['ts']))
    else:
        # POST PUT
        for k in q.keys():
            if k not in ['appkey', 'ts', 'sign']:
                args.append((k, q[k] ))
        sign_base_string = _genArgsStr(matter, args)
        re_sign = md5(sign_base_string + XCFG.SECRET).hexdigest()
        #print "getsign\t", q['sign']
        #print "re_sign\t", re_sign
        chk_sign = (re_sign == q['sign'])
        chk_time = (CFG.STLIMI&gt;float("%.3f" % (time())) - float(q['ts']))
        #print api_matter, q
    return chk_time&amp;chk_sign
    #return "debug"

</t>
<t tx="zoomq.20130925103854.6447">def _genArgsStr(api_path, args):
    key_values = ["%s=%s"% (arg[0], arg[1]) for arg in args]
    base_string = api_path + "/" + "&amp;".join(key_values)
    return base_string

</t>
<t tx="zoomq.20130925103854.6449">def _genQueryArgs(api_matter, q="", rest_method="GET"):
    '''单向加密服务端核查:
        - [MatterURI] ~= cli/usr/info/&lt;uuid&gt; 不必包含http 域名部分
        - sign 制作:
            - GET 时将[MatterURI]/appkey_值--ts_值 参数字串缀上密文 md5 成 
            - POST 时 [MatterURI]为uri 提交时数据拼为仿GET字串 md5 成
        - 服务端使用相同算法,生成 sign 对比,并明确请求在 CFG.STLIMI 秒之内发生        
        - 注意! 参数的次序必须固定: 
            - appkey-&gt;ts-&gt;[q]-&gt;sign
            - appkey=***&amp;ts=***&amp;sign=***
            - 整体作base64.urlsafe_b64encode()包裹
        - GET/DELETE 时将参数拼为统一联合字串
        - PUT/POST 时提交唯一数据,同 GET 时的参数字串结构
    '''
    #print "_genQueryArgs as:", rest_method
    matter = "%s/%s"% (CFG.APIPRE, api_matter)
    args = []
    args.append(("appkey", XCFG.APPKEY ))
    args.append(("ts", "%.3f" % (time()) ))
    if 'PUT' == rest_method:
        if not q:
            print "缺少 set=*** 设定值"
            return None
        q_args = q.split("=")   
        #对于值中包含类似 appmsg/show?__biz=MjM$sign=sdfsfd .. 形式就失常了!
        #print "=".join(q_args[1:])
        #args.append((q_args[0], base64.urlsafe_b64encode(q_args[1])))
        args.append((q_args[0], base64.urlsafe_b64encode(
                        "=".join(q_args[1:]) 
                        )
                    ))
        
    # GET|POST|DELETE 一般不提交额外数据
    sign_base_string = _genArgsStr(matter, args)
    args.append(("sign"
        , md5(sign_base_string + XCFG.SECRET).hexdigest()))
    return args


'''
    if rest_method in ['GET', 'DELETE']:
        pass
        args.append(("sign"
            , md5(sign_base_string + XCFG.SECRET).hexdigest()))
    elif 'PUT' == rest_method:
        if not q:
            print "缺少 set=*** 设定值"
            return None
        q_args = q.split("=")
        args.append((q_args[0], base64.urlsafe_b64encode(q_args[1])))
        print args
    else:
        # POST cat not set=***
        pass
        #sign_base_string = _genArgsStr(matter, args)
        args.append(("sign"
            , md5(sign_base_string + XCFG.SECRET).hexdigest()))
    args.append(("sign"
        , md5(sign_base_string + XCFG.SECRET).hexdigest()))
    print args
    return args

'''


</t>
<t tx="zoomq.20130925103854.6450">toUser = XCFG.AS_SRV
fromUser = XCFG.AS_USR
tStamp = int(time())
content = args.split("=")[-1].strip()
xml = CFG.TPL_SUBS % locals()
cmd = "curl -d '%s' %s/%s "% (xml, AS_LOCAL, 'echo')
#print xml
#return None


</t>
<t tx="zoomq.20130925103854.6451">put_args = _genQueryArgs(uri, q=args, rest_method=method)
if not put_args:
    print "_rest_main()\n\t参数错误,请先使用 -h 学习;-)"
    return None
#print "put_args\n\t", put_args
pur_vars = " ".join(["%s=%s"% (p[0], p[1]) for p in put_args])
#print "pur_vars:\n\t", pur_vars
uri = "%s%s/%s %s"% (host, CFG.APIPRE, uri, pur_vars)
cmd = "http -f -b %s %s "% (method, uri)







</t>
<t tx="zoomq.20130925103854.6452">access_token = _wx_token_get()
_url = uri.split('/')
if 2 &lt; len(_url):
    # 有具体参数时
    if 'usr' == _url[1]:
        #print "获取指定用户信息"
        &lt;&lt;获取指定用户信息&gt;&gt;
    elif 'msg' == _url[1]:
        print "消息发送"
        &lt;&lt;消息发送&gt;&gt;
else:
    &lt;&lt;列表获得&gt;&gt; 
    
#return None
'''经测试,订阅号同公众号的接口用户完全不同,
无法共用接口!
'''





</t>
<t tx="zoomq.20130925103854.6455">TXT_VER = u'''阅读邻居(杨早) 公众号服务系统:
- 版本:%s

Changelog:
- 150207 追加子菜单 互推
- 150206 修订返回文字,精减以免超时
- 150204 进一步 精减为 杨早公众号使用 
- 150125 开始为 蠎中国 精减/定制 
- 130928 启用Storage 服务,数据可备份/下载/恢复
- 130926 启用 Jeff 的SDK,配合运营CLI 工具简化代码
- 130923 初始可用,并发布 42分钟乱入 wechat 手册!-)
- 130918 为 珠海GDG 启动开发

更多细节,请惯性地输入 h 继续吧 :)'''% VERSION

TXT_HELP = u'''阅读邻居(杨早) 公众号目前支持以下命令:
s   ~ 查阅文章
h   ~ 使用帮助
V   ~ 系统版本
'''
TXT_WELCOME = u'''阅读邻居(杨早) 公众号目前支持以下命令:
s   ~ 查阅文章
h   ~ 使用帮助
V   ~ 系统版本
功能正在完善中，欢迎反馈。
更多细节,请惯性地输入 h 继续吧 :)
'''
TXT_THANX = u'''亲! 感谢反馈信息, 大妈们得空就回复 ;-)
'''


</t>
<t tx="zoomq.20130925103854.6458">PAPER_TAGS = ESSAY_TAG.keys()
TXT_TAG_DEFINE = "    ".join([u"%s %s\n"%(k, ESSAY_TAG[k]) for k in ESSAY_TAG_KEYS])

TXT_PUB_WAIT = u'''对不起亲!
过往文章的信息,大妈们还没来的及增补进来,
放轻松,等等先... (~.~)

更多细节,请惯性地输入 h 继续吧 :)
'''
TXT_PLS_TAG = u'''亲! 请输入文章类别编码(类似 dm 的2字母):
然后,俺才能给出该类别的文章索引...

%s

也可以输入 q 退出文章查阅流程;-)

更多细节,请惯性地输入 h 继续吧 :)
'''% TXT_TAG_DEFINE

TXT_OUT_TAG = u'''亲! 目测输错了类别编码,再试?
(类似 dm 的字串):

%s

也可以输入 q 退出文章查阅流程;-)

更多细节,请惯性地输入 h 继续吧 :)
'''% TXT_TAG_DEFINE

TXT_TAG_PAPERS = u'''%s ::

%s

可输入 q 退出文章查阅流程;-)

更多细节,请惯性地输入 h 继续吧 :)
'''

TXT_PLS_INT = u'''亲! 请输入类型文章的编号,仅数字就好:

也可以输入 q 退出文章查阅流程;-)

更多细节,请惯性地输入 h 继续吧 :)
'''

TXT_PUB_LIST = u'''%s ::
%s

也可以输入 q 退出文章查阅流程;-)

更多细节,请惯性地输入 h 继续吧 :)
'''


</t>
<t tx="zoomq.20130925103854.6463">def DAMAID(name):
    return 'm_%s_DM'% name



</t>
<t tx="zoomq.20130926092950.5432">if 'SERVER_SOFTWARE' in os.environ:
    # SAE
    AS_SAE = True
else:
    # Local
    AS_SAE = False
</t>
<t tx="zoomq.20130927104354.5456">from sae.storage import Bucket
BK = Bucket('bkup')


</t>
<t tx="zoomq.20130927104354.6047">def PUT2SS(raw, actype='bkup', name='db'):
    if 'bkup' == actype:
        sid = "%s.dump"% GENID('bk', name)
    print "\n PUT2SS:", sid
    #   初始化一个Storage客户端。
    BK.put_object(sid, raw)
    uri = BK.generate_url(sid)
    return sid, uri





</t>
<t tx="zoomq.20130927104354.6049">@APP.get('/cli/st/kv/&lt;qstr&gt;')
def st_kv(qstr):
    '''查询 KVDB 整体现状
    '''
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/st/kv", q_dict, "GET"):
        feed_back = {'data':[]}
        #data.append(KV.get_info())
        return KV.get_info()
        feed_back['msg'] = "safe quary;-)"
        feed_back['data'] = KV.get_info()
        return feed_back
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20130927104354.6053">if args:
    li_arg = args.split('=')
    if 'yaml' == li_arg[0]:
        print "外部数据文件%s"% li_arg[1]
        get_args = _genQueryArgs(uri)
        get_str = "&amp;".join(["%s=%s"% (g[0], g[1]) for g in get_args])
        uri = "%s%s/%s/%s"% (host
            , CFG.APIPRE
            , uri
            , base64.urlsafe_b64encode(get_str)
            )
        #print uri
        #cmd = "http -b %s %s &lt; %s"% (method, uri, li_arg[1])
        cmd = "http -b -f %s %s yaml@%s"% (method, uri, li_arg[1])
        #print cmd
else:
    put_args = _genQueryArgs(uri, q=args, rest_method=method)
    pur_vars = " ".join(["%s=%s"% (p[0], p[1]) for p in put_args])
    uri = "%s%s/%s %s"% (host, CFG.APIPRE, uri, pur_vars)
    cmd = "http -f -b %s %s "% (method, uri)
    


</t>
<t tx="zoomq.20130929203117.3712">@APP.post('/cli/push/p/&lt;qstr&gt;')
def push_papers(qstr):
    q_dict = _query2dict(qstr)
    q_form = request.forms
    q_file = request.files.get('yaml')

    if _chkQueryArgs("/cli/push/p", q_dict, "POST"):
        feed_back = {'data':[], 'msg':''}
        _yaml = q_file.file.read()
        set_var = yaml.load(_yaml) #q_file.file.read()
        _tg = set_var.keys()[0]        
        &lt;&lt;reset_old&gt;&gt;
        #return None
        &lt;&lt;flush_in&gt;&gt;
        return feed_back
    else:
        return "alert quary!-("



</t>
<t tx="zoomq.20131007093121.5601"># collection wechat papers mana. matters
'''
'''
</t>
<t tx="zoomq.20131007093121.5614"># collection usr ACL matter
'''
'''
</t>
<t tx="zoomq.20131007093121.5615">@APP.get('/cli/sum/m/&lt;qstr&gt;')
def sum_usr(qstr):
    #print request.query_string #query.keys()#.appkey
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/sum/m", q_dict, "GET"):
        data = []
        usrs = KV.get(CFG.K4D['m'])
        print usrs
        for u in usrs[:3]:
            data.append(KV.get(u))
    
        return {'msg':"safe quary;-)"
            , 'data':data
            , 'count': len(usrs)
            }
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20131007093121.5616">@APP.put('/cli/acl/usr/&lt;uuid&gt;')
def put_usr_acl(uuid):
    q_dict = request.forms
    #print q_dict
    if _chkQueryArgs("/cli/acl/usr/%s"% uuid, q_dict, "PUT"):
        if 'set' in q_dict.keys():
            &lt;&lt;acl bind&gt;&gt;
            return {'msg':"safe quary;-)"
                , 'data': data
                }
        else:
            return {'alert':"lost set=XXX !-("}
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20131007093121.5617">q_acl = base64.urlsafe_b64decode(q_dict['set'])
if q_acl in CFG.ACL_USR.keys():
    print q_acl, CFG.ACL_USR[q_acl]
    data = {}
    his_id = HISIT('usr', uuid, "U")
    print CFG.USR.update({'uuid':uuid}
        ,{"$set": {"acl": CFG.ACL_USR[q_acl]
            , 'his_id':his_id
            }
        })
    data['hisid'] = his_id
    data['setACL'] = CFG.ACL_USR[q_acl]
    
    #print dump, "\n\t", len(dump)
    #print marshal.loads(dump)
else:
    return {'alert':'bad acl alias!-( MUST:[ban|usr|api|admin]'}

</t>
<t tx="zoomq.20131007093121.5618">@APP.put('/cli/reliv/usr/&lt;uuid&gt;')
def put_usr_reliv(uuid):
    q_dict = request.forms
    #print q_dict
    if _chkQueryArgs("/cli/reliv/usr/%s"% uuid, q_dict, "PUT"):
        if 'set' in q_dict.keys():
            &lt;&lt;reliv del&gt;&gt;
            return {'msg':"safe quary;-)"
                , 'data': data
                }
        else:
            return {'alert':"lost set=XXX !-("}
    else:
        return "alert quary!-("



</t>
<t tx="zoomq.20131007093121.5619">data = {}
his_id = HISIT('usr', uuid, "U")
print CFG.USR.update({'uuid':uuid}
    ,{"$set": {"del": 0
        , 'his_id':his_id
        }
    })
data['hisid'] = his_id
data['means'] = "usr reliving now"
</t>
<t tx="zoomq.20131007093121.5620">@APP.delete('/cli/del/usr/&lt;uuid&gt;/&lt;qstr&gt;')
def del_usr(uuid, qstr):
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/del/usr/%s"% uuid, q_dict, "DELETE"):
        &lt;&lt;usr del&gt;&gt;
        return {'msg':"safe quary;-)"
            , 'data': data
            }
    else:
        return "alert quary!-("





</t>
<t tx="zoomq.20131007093121.5621">data = {}
his_id = HISIT('usr', uuid, "D")
print CFG.USR.update({'uuid':uuid}
    ,{"$set": {"del": 1
        , 'his_id':his_id
        }
    })
data['hisid'] = his_id
data['means'] = "usr DELETE now!"
</t>
<t tx="zoomq.20131007093121.5622">@APP.get('/cli/info/usr/&lt;uuid&gt;/&lt;qstr&gt;')
def get_usr_info(uuid, qstr):
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/info/usr/%s"% uuid, q_dict, "GET"):
        return {'msg':"safe quary;-)"
            , 'data':CFG.USR.find_one({'uuid': uuid}, {'_id':0})
            }
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20131007093121.5623">@APP.get('/cli/list/usr/&lt;acl&gt;/&lt;qstr&gt;')
def q_usr_acl(acl, qstr):
    '''ACL_USR={'ban':0,'usr':1,'api':42,'admin':100}
    '''
    print acl
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/list/usr/%s"% acl, q_dict, "GET"):
        data = []
        for u in CFG.USR.find({'acl':acl}
            , {'_id':0, 'pp':1, 'nm':1, 'acl':1, 'uuid':1}
            , limit=5).sort("uuid"):
            data.append(u)
            
        return {'msg':"safe quary;-)"
            , 'data':data
            , 'count': CFG.USR.find({'acl':acl}).count()
            }
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20131007093121.5624">@APP.get('/cli/find/usr/&lt;kword&gt;/&lt;qstr&gt;')
def find_usr_kword(kword, qstr):
    #print request.query_string #query.keys()#.appkey
    q_dict = _query2dict(qstr)
    pattern = re.compile(".*%s.*"% kword)
    if _chkQueryArgs("/cli/find/usr/%s"% kword, q_dict, "GET"):
        data = []
        for u in CFG.USR.find({"$or":[{'nm':pattern}
                , {'em':pattern}
                , {'acc':pattern}
                , {'uuid':pattern}
                ]}
            , {'_id':0, 'pp':1, 'nm':1, 'acl':1, 'uuid':1}
            , limit=5):
            data.append(u)
            
        return {'msg':"safe quary;-)"
            , 'data':data
            , 'count': CFG.USR.find({"$or":[{'nm':pattern}
                , {'em':pattern}
                , {'mb':pattern}
                , {'uuid':pattern}
                ]}).count()
            }
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20131010225811.3726">@APP.get('/cli/sum/p/&lt;tag&gt;/&lt;qstr&gt;')
def st_p_tag(tag, qstr):
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/sum/p/%s"% tag, q_dict, "GET"):
        feed_back = {'data':[]}
        #print tag
        all_papers = KV.get(CFG.K4D[tag])
        #print all_papers
        for i in all_papers:
            #print ['%s-&gt;%s'%(i,j['title']) for j in KV.get(i)['news']]
            _node = KV.get(i)
            _info = '''%s &gt; %s: [%s]
                '''%(i
                    , _node['code']
                    , ','.join([j['title'] for j  in _node['news']])
                    )
                
            feed_back['data'].append(_info)
        return feed_back
        
    else:
        return "alert quary !-("

</t>
<t tx="zoomq.20131011103836.16656">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
#!/usr/bin/env python
import sys
from time import time
from subprocess import Popen
from xsettings import XCFG


if __name__ == "__main__":
    if 2 != len(sys.argv):
        print """ Usage::
        $ python CLI.py [指令]
        """
    else:
        TPL_TEXT='''&lt;xml&gt;
        &lt;ToUserName&gt;&lt;![CDATA[%(toUser)s]]&gt;&lt;/ToUserName&gt;
        &lt;FromUserName&gt;&lt;![CDATA[%(fromUser)s]]&gt;&lt;/FromUserName&gt;
        &lt;CreateTime&gt;%(tStamp)s&lt;/CreateTime&gt;
        &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;
        &lt;Content&gt;&lt;![CDATA[%(content)s]]&gt;&lt;/Content&gt;
        &lt;/xml&gt;'''

        toUser = XCFG.AS_SRV
        fromUser = XCFG.AS_USR

        tStamp = int(time())
        content = sys.argv[1]
        xml = TPL_TEXT % locals()

        cmd = "curl -d '%s' http://localhost:8080/api/echo"% xml
        print cmd
        #Popen(cmd, shell=True, close_fds=True)
</t>
<t tx="zoomq.20131223160728.4901">get_args = _genQueryArgs(uri, rest_method=method)
#print "get_args\n\t", get_args
get_str = "&amp;".join(["%s=%s"% (g[0], g[1]) for g in get_args])
#print get_str
uri = "%s%s/%s/%s"% (host
    , CFG.APIPRE
    , uri
    , base64.urlsafe_b64encode(get_str)
    )
cmd = "http -b %s %s "% (method, uri)

#print uri

#return None
</t>
<t tx="zoomq.20131223160728.4902">def _https_get(uri, tpl, **args):
    c = httplib.HTTPSConnection(uri)
    #print args
    c.request("GET", tpl % args)
    response = c.getresponse()
    #print response.status, response.reason
    data = response.read()
    return data
</t>
<t tx="zoomq.20131223160728.4904">@APP.get('/cli/info/&lt;uuid&gt;/&lt;qstr&gt;')
def info_kv(uuid, qstr):
    '''查询 UUID 的信息
    '''
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/info/%s"% uuid, q_dict, "GET"):
        feed_back = {'data':[]}
        print "info_kv()&gt;&gt;&gt; ",uuid
        print KV.get(uuid)
        #return KV.get(uuid)
        feed_back['msg'] = "safe quary;-)"
        feed_back['data'] = KV.get(uuid)
        return feed_back
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20131224083725.5903"># 列表获得
#uri = 'wx/ls'
data = _https_get(CFG.CLI_URI[uri][0]
    , CFG.CLI_URI[uri][1]
    , token = access_token
    )
print data


return None
</t>
<t tx="zoomq.20131224083725.5904">#openid = _url[-1]
wx_uri = "/".join(_url[:2])
data = _https_get(CFG.CLI_URI[wx_uri][0]
    , CFG.CLI_URI[wx_uri][1]
    , token = access_token
    , openid = _url[-1]
    )
print data

return None</t>
<t tx="zoomq.20131224083725.5906">def _wx_token_get():
    data = _https_get(CFG.CLI_URI['wx/t'][0]
        , CFG.CLI_URI['wx/t'][1]
        , appid = XCFG.APPKEY
        , secret = XCFG.SECRET
        )
    print data
    js = json.loads(data)
    print js
    print "access_token: ", js['access_token']
    return js['access_token']


</t>
<t tx="zoomq.20131224083725.5907">wx_uri = "/".join(_url[:2])

host = CFG.CLI_URI[wx_uri][0]
url = "%s=%s"% (CFG.CLI_URI[wx_uri][1], access_token)

openid = _url[-1]
content = u'#细思恐极....'#.encode('utf-8')
#.encode('utf-8')#"sayeahoo..."
title = u'如何使用社区服务号'
_msg = CFG.SRV_TXT_JSON% locals()
#CFG.SRV_FAQ_JSON% locals()
#CFG.SRV_TXT_JSON% locals()
#(openid, u'#细思恐极....')
#   "sayeahoo..."   u'#细思恐极....'
params  = urllib.urlencode({"msgtype": "text"
    , "touser": openid
    , "text": {"content": "sayeahoo..."}
    })
#print params
data = _https_post(CFG.CLI_URI[wx_uri][0]
    , CFG.CLI_URI[wx_uri][1]
    , _msg  #bytearray(_msg.encode('utf-8'))
    , token = access_token
    )
#print data
return None 


_msg = {
    "touser":access_token,
    "msgtype":"text",
    "text":
    {
         "content":"Hello World"
    }
}

headers = {
    'User-Agent': 'python',
    'Content-Type': 'application/x-www-form-urlencoded',
}
values = urllib.urlencode(_msg)
#urllib.quote(_msg) #urllib.urlencode(_msg)
conn = httplib.HTTPSConnection(host)
conn.request("POST", url, values, headers)
response = conn.getresponse()
data = response.read()
print 'Response: ', response.status, response.reason
print 'Data:'
print data

return None

tpl_msg = '''{
    "touser": "%s", 
    "msgtype": "text", 
    "text": {
        "content": "%s"
    }
}'''

_msg = tpl_msg% (openid, u'是也乎,是也乎')

_curl = "curl --data '%s' -3 http://%s/%s=%s"%( _msg
    , CFG.CLI_URI[wx_uri][0]
    , CFG.CLI_URI[wx_uri][1]
    , access_token
    )
#curl -3 URL
#curl --data-urlencode "date=April 1" example.com/form.cgi
#print _curl
cmd = _curl
return None

''' 发送文本消息

{
    "touser":"OPENID",
    "msgtype":"text",
    "text":
    {
         "content":"Hello World"
    }
}
'''

</t>
<t tx="zoomq.20131224083725.5909">def _https_post(uri, tpl, values, **args):
    '''esp. HTTPSConnection only POST bytearray, means:
    - values MUST 'unicode'
    '''
    url = "https://%s%s"% (uri, tpl % args)
    print url
    #return None
    data = bytearray(values.encode('utf-8'))    #urllib.urlencode(values)
    req = urllib2.Request(url, data)
    response = urllib2.urlopen(req)
    #print dir(response)
    #return None
    print response.code, response.msg
    result = response.read()
    print result
    return result
    
    ##########################################################
    
    c = httplib.HTTPSConnection(uri, 443)
    print uri
    values = "123123"
    print tpl % args
    c.request("POST"
        , tpl % args
        , bytearray(values.encode('utf-8'))
        #values#.encode('utf-16be') #.decode("utf-8")
        #, {'Content-Type': 'text/plain; charset=utf-8'}
        )
    #return None
    response = c.getresponse()
    print response.status, response.reason
    data = response.read()
    return data
    
    
    
'''
conn = httplib.HTTPSConnection(host='www.site.com', port=443, cert_file=_certfile)
   params  = urllib.urlencode({'cmd': 'token', 'device_id_st': 'AAAA-BBBB-CCCC',
                                'token_id_st':'DDDD-EEEE_FFFF', 'product_id':'Unit Test',
                                'product_ver':"1.6.3"})
    conn.request("POST", "servlet/datadownload", params)
    content = conn.getresponse().read()
    #print response.status, response.reason
    conn.close()
'''</t>
<t tx="zoomq.20131225115522.4949">'''collected old code for doc.
'''
    # base hard code for all 
    xml = etree.XML(request.forms.keys()[0])
    __MsgType = xml.findtext("MsgType")
    __Content = xml.findtext("Content") #.encode('utf8')
    fromUser = xml.findtext("ToUserName")
    toUser = xml.findtext("FromUserName")
    G_CRT_USR = __chkRegUsr(toUser)
    G_CRT_USR['msg'] = __Content
    G_CRT_USR['fromUser'] = fromUser
    G_CRT_USR['toUser'] = toUser
    # usage pyfsm as FSM echo all kinds of usr ask
    weknow = pyfsm.Registry.get_task('weknow')
    if G_CRT_USR['fsm']:
        weknow.start2(G_CRT_USR['fsm'], G_CRT_USR)
        __update_usr(G_CRT_USR)
    else:
        weknow.start2('setup', G_CRT_USR)
        G_CRT_USR['fsm'] = "setup"
        __update_usr(G_CRT_USR)
    print "weknow.send2:\n", weknow.send2(__Content, G_CRT_USR)
    return None
    
    # base choas if elif else
    if isinstance(Content, unicode):
        print "可能是中文"
        #__Content = Content.encode('utf-8')
    else:
        __Content = Content
        print __Content #.encode('utf8')

        if "text" == __MsgType:
            #print CFG.CMD_ALIAS['help']
            if __Content in CFG.CMD_ALIAS['help'] :
                &lt;&lt;HELP&gt;&gt;
            elif __Content in CFG.CMD_ALIAS['version']:
                &lt;&lt;VERSION&gt;&gt;
            elif __Content in CFG.CMD_ALIAS['info']:
                &lt;&lt;InfoMember&gt;&gt;
            elif "em" in __Content.split(":"):
                &lt;&lt;InfoMemberEM&gt;&gt;
            elif __Content in CFG.CMD_ALIAS['search']:
                &lt;&lt;SEARCH&gt;&gt;
            elif __Content in CFG.CMD_ALIAS['sayeahoo']:
                &lt;&lt;sayeahoo&gt;&gt;
            else:
                &lt;&lt;THANKS&gt;&gt;



</t>
<t tx="zoomq.20131226095232.5934">, "find/m":     "GET"       # 搜索用户
, "del/usr":    "DELETE"    # 软删除所有用户 (包含tag 信息)
, "reliv/usr":  "PUT"       # 恢复指定用户
, "acl/usr":    "PUT"       # 设置用户权限
, "ls/usr":   "GET"       # 列出指定级别用户

</t>
<t tx="zoomq.20131226095232.5935">, "fix/dm":     "PUT"       # 修订 大妈 信息
, "fix/m":      "PUT"       # 修订 成员 信息
, "fix/e":      "PUT"       # 增补 活动 信息
, "fix/p/fv":   "PUT"       # 增补 gb文章 信息
, "fix/p/dl":   "PUT"       # 增补 dd文章 信息
, "fix/p/es":   "PUT"       # 增补 gt文章 信息
, "fix/p/ac":   "PUT"       # 增补 dm文章 信息
, "fix/p/it":   "PUT"       # 增补 hd文章 信息
, "fix/p/ot":   "PUT"       # 增补 其它文章 信息

, "sum/p/fv":   "GET"       # 统计 分类文章 信息现状
, "sum/p/dl":   "GET"       # 统计 分类文章 信息现状
, "sum/p/es":   "GET"       # 统计 分类文章 信息现状
, "sum/p/ac":   "GET"       # 统计 分类文章 信息现状
, "sum/p/it":   "GET"       # 统计 分类文章 信息现状
, "sum/p/ot":   "GET"       # 统计 分类文章 信息现状
, "sum/his":    "GET"       # 统计 历史 索引现状
, "sum/db":     "GET"       # 统计 整体 信息现状
, "sum/dm":     "GET"       # 统计 大妈 信息现状
, "sum/m":      "GET"       # 统计 成员 信息现状
, "sum/e":      "GET"       # 统计 活动 信息现状
, "sum/p":      "GET"       # 统计 文章 信息现状
, "del/p":      "DELETE"    # 删除指定文章

</t>
<t tx="zoomq.20131226095232.5936">, "push/p":     "POST"      # 推送批量文章数据 可以根据 url 判定是否有重复 

, "sum/bk":     "GET"       # 综合 备份 数据现状
, "del/bk":     "DELETE"    # 删除指定备份 dump

, "bk/db":    "POST"      # 备份整个 KVDB
, "bk/dm":    "POST"      # 备份所有 大妈
, "bk/m":     "POST"      # 备份所有 成员
, "bk/e":     "POST"      # 备份所有 活动
, "bk/p":     "POST"      # 备份所有 文章

, "revert/db":  "PUT"      # 恢复整个 KVDB
, "revert/dm":  "PUT"      # 恢复 大妈 数据
, "revert/m":   "PUT"      # 恢复 成员 数据
, "revert/e":   "PUT"      # 恢复 活动 数据
, "revert/p":   "PUT"      # 恢复 文章 数据

, "resolve/his": "PUT"     # 重建 HIS 索引
, "resolve/wx":  "PUT"     # 重建 wx_Passpord--&gt;UUID 索引
, "resolve/fw": "PUT"      # 重建 FW 索引容器,从旧的 [] -&gt; {}

</t>
<t tx="zoomq.20131226095232.5937">, "wx/t":       "HTTPS"     # 获取 token
, "wx/ls":      "HTTPS"    # 获取关注列表
, "wx/usr":     "HTTPS"     # 获取 用户信息
, "wx/msg":     "HTTPS"     # 获取 用户信息

, "sum/fw":     "GET"     # 获取 转抄 状态
, "fw/ll":      "GET"     # 模拟 大妈 刷转抄
, "fw/dd":      "GET"     # 模拟 订户 刷回复
, "fw/mm":  "PUT"     # 忽略 订户 消息
, "fw/aa":  "PUT"     # 转复 订户 消息

</t>
<t tx="zoomq.20131226095232.5938">VERSION = "echo4wx v15.9.8.2222"</t>
<t tx="zoomq.20150123094404.30">TPL_SUBS='''&lt;xml&gt;
&lt;ToUserName&gt;&lt;![CDATA[%(toUser)s]]&gt;&lt;/ToUserName&gt;
&lt;FromUserName&gt;&lt;![CDATA[%(fromUser)s]]&gt;&lt;/FromUserName&gt;
&lt;CreateTime&gt;%(tStamp)s&lt;/CreateTime&gt;
&lt;MsgType&gt;&lt;![CDATA[event]]&gt;&lt;/MsgType&gt;
&lt;Event&gt;&lt;![CDATA[%(content)s]]&gt;&lt;/Event&gt;
&lt;/xml&gt;'''
TPL_CLICK='''&lt;xml&gt;
&lt;ToUserName&gt;&lt;![CDATA[%(toUser)s]]&gt;&lt;/ToUserName&gt;
&lt;FromUserName&gt;&lt;![CDATA[%(fromUser)s]]&gt;&lt;/FromUserName&gt;
&lt;CreateTime&gt;%(tStamp)s&lt;/CreateTime&gt;
&lt;MsgType&gt;&lt;![CDATA[CLICK]]&gt;&lt;/MsgType&gt;
&lt;Event&gt;&lt;![CDATA[%(content)s]]&gt;&lt;/Event&gt;
&lt;/xml&gt;'''
TPL_TEXT='''&lt;xml&gt;
&lt;ToUserName&gt;&lt;![CDATA[%(toUser)s]]&gt;&lt;/ToUserName&gt;
&lt;FromUserName&gt;&lt;![CDATA[%(fromUser)s]]&gt;&lt;/FromUserName&gt;
&lt;CreateTime&gt;%(tStamp)s&lt;/CreateTime&gt;
&lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;
&lt;Content&gt;&lt;![CDATA[%(content)s]]&gt;&lt;/Content&gt;
&lt;/xml&gt;'''

TPL_URIS='''&lt;xml&gt;
&lt;ToUserName&gt;&lt;![CDATA[%(toUser)s]]&gt;&lt;/ToUserName&gt;
&lt;FromUserName&gt;&lt;![CDATA[%(fromUser)s]]&gt;&lt;/FromUserName&gt;
&lt;CreateTime&gt;%(tStamp)s&lt;/CreateTime&gt;
&lt;MsgType&gt;&lt;![CDATA[news]]&gt;&lt;/MsgType&gt;
&lt;ArticleCount&gt;%(item_count)d&lt;/ArticleCount&gt;
&lt;Articles&gt;
%(items)s
&lt;/Articles&gt;
&lt;/xml&gt; 
'''

TPL_ITEM='''&lt;item&gt;
&lt;Title&gt;&lt;![CDATA[%(title)s]]&gt;&lt;/Title&gt; 
&lt;Description&gt;&lt;![CDATA[%(description)s]]&gt;&lt;/Description&gt;
&lt;PicUrl&gt;&lt;![CDATA[%(picurl)s]]&gt;&lt;/PicUrl&gt;
&lt;Url&gt;&lt;![CDATA[%(url)s]]&gt;&lt;/Url&gt;
&lt;/item&gt;
'''


</t>
<t tx="zoomq.20150202122015.10">def _wx_echo_cnt(wxreq, cmd):
    print "_wx_echo_cnt", cmd
    _items = KV.get(str(cmd))
    if _items:
        resp = WxNewsResponse(
                [WxArticle(p['title']
                    ,Description=""
                    ,Url=p['uri']
                    ,PicUrl=p['pic']) for p in _items['news']]
                , wxreq).as_xml()
    else:
        @others
    
    return resp
    #return WxTextResponse(CFG.TXT_HELP, wxreq).as_xml()</t>
<t tx="zoomq.20150202122015.11">def _wx_echo_cmd(wxreq, cmd):
    for k in CFG.CMD_TPLS.keys():
        if cmd in k:
            print CFG.CMD_TPLS[k]
            _TPL = eval('CFG.%s'% CFG.CMD_TPLS[k])
            #print type(_TPL)
            #print type(CFG.TXT_HELP)
            return WxTextResponse(_TPL, wxreq).as_xml()
    #return None
    return WxTextResponse(CFG.TXT_HELP, wxreq).as_xml()</t>
<t tx="zoomq.20150202122015.12">def _wx_echo_idx(wxreq, cmd):
    print "_wx_echo_idx", cmd
    all_papers = KV.get(CFG.K4D[cmd])
    all_papers.sort(key=lambda x: int(x))
    #print len(all_papers)
    #print CFG.ESSAY_TAG[cmd]
    if 0 == len(all_papers):
        #_exp = TPL_IDX_LOST.format( tag_info = CFG.ESSAY_TAG[cmd])
        #u"但是...历史文章还未整理索引起来,敬请期待 눈_눈"
        return WxTextResponse(TPL_IDX_LOST.format( tag_info = CFG.ESSAY_TAG[cmd])
                , wxreq).as_xml()
    else:
        #print all_papers
        real_exp = _limit_echo_idx(all_papers, cmd)
        return WxTextResponse(real_exp, wxreq).as_xml()



</t>
<t tx="zoomq.20150202122015.13">GOBJMAP = {'his':'_{timestamp}_his{tot}'
    #,'tag':'t_%(timestamp)s_TAG%(tot)d'
    ,'bk':'bk_{timestamp}_ST{tot}_{name}'
    #,'p':'p_%(timestamp)s_PUB%(tot)d'
    ,'menu':'{menu}_{timestamp}_PUB{tot}'
    #,'fw':'fw_%(timestamp)s_PUB%(tot)d'
    }
ESSAY_TAG_KEYS = ['11','12', '13', '14', '15',  
    '21', '22', '23', '24', '25', 
    '31', '32', '33', '34','35','36','37'
    ]

# for show in wx echo
_PRE20 = u'''杨早编"话题"已有十年,回头看,往前看,好多文章值得一看,再看'''
_PRE30 = u'''"阅读邻居"是绿茶,邱小石,杨早创办的读书会,一年十期'''
ESSAY_TAG = {'11':u''' 介读 ~ 
         致力于向别人推介各种读物,纸书,电影,网文,音乐,有介无类
        '''
    , '12':u''' 论世 ~ 
        论与当下生活相关的一切，世相，人情，俗话，新事
        '''
    , '13':u''' 讲史 ~ 
        讲述历史的各种趣闻，八卦，人人都爱好故事
        '''
    , '14':u''' 记事 ~ 
        杨早自己的生活与回忆，还包括两周一篇的“傻子镇同步“
        '''
    , '15':u''' 衡文 ~ 
        应邀点评一些中学生的作文，在“应试”与“文章”两类标准之间切换
        '''
    , '21':u'''%s #综述# ~ 
        杨早每年都会写一篇年度综述,梳理当年中国社会精神脉络 
        '''% _PRE20
    , '22':u'''%s #文化# ~ 
        这是1217俱乐部本色当行
        '''% _PRE20
    , '23':u'''%s #教育# ~ 
        我们是这样被教大的,我们希望我们的孩子还这样吗?
        '''% _PRE20
    , '24':u'''%s #社会# ~ 
        其实是把社会热点事件当作文本来读,世界是一本大书
        '''% _PRE20
    , '25':u'''%s #观影# ~ 
        私人影评
        '''% _PRE20
    , '31':u'''%s 
    荐书 ~ 
        每期读书会,我们都会让每个参与者推荐一至两本书. 由于自由报名,参与者无可预知,因此书单也千奇百怪,无所不包
        '''% _PRE30
    , '32':u'''%s 
    主题 ~ 
        每期会指定一本或多本主题书,参与者必须读过+发言,这些发言,也是让人脑洞大开
        '''% _PRE30
    , '33':u'''%s 
    DIAO ~ 
        一个盲拍式的游戏. 三个创始人各推荐一本书,不透露书名,挂在读易洞网店打包出售,附赠微刊一份,包括当月阅读邻居荐书单,还有三名创始人的荐书大PK
        '''% _PRE30
    , '34':u'''%s 
    洞见 ~ 
        读易洞是阅读邻居的大本营,要开会要议事,就在群里吆喝一声"洞见",将来我们把各种讨论描述赞美吐槽编印成书,也会叫"洞见"
        '''% _PRE30
    , '35':u'''%s 
    互推 ~ 
        与别的公号或者人物的推介 
        '''% _PRE30
    , '36':u'''%s 
    来瞧 ~ 
        讲座预告，活动记录，报道访谈.
        '''% _PRE30
    , '37':u'''%s 
    征稿 ~ 
        向关注者征集稿件.
        '''% _PRE30
    }



</t>
<t tx="zoomq.20150202122015.14">#f_name, f_ext = os_splitext(q_file.filename)
count = 0
for k in set_var[_tg].keys():
    count += 1
    if isinstance(set_var[_tg][k], dict):
        # single news
        _load_news(_tg, k, set_var[_tg][k])
        
    elif isinstance(set_var[_tg][k], list):
        # mulit-news
        _load_news(_tg, k, set_var[_tg][k], multi = True)
        #data.append(KV.get_info())
    else:
        pass
feed_back['msg'] += "reloaded %s POSTs. \nin CLASS %s"% (count, _tg)
feed_back['data'].append(KV.get_info())

_append = []
echo_idx = KV.get(CFG.K4D[_tg])
echo_idx.sort(key=lambda x: int(x))
print "_tg", _tg
if "00" == _tg:
    for i in echo_idx:
        #print ['%s-&gt;%s'%(i,j['title']) for j in KV.get(i)['news']]
        _append.append('%s-&gt;%s'%(i[2:]
            , ",".join([j['title'] for j in KV.get(i)['news']])
            ))
else:
    for i in echo_idx:
        #print ['%s-&gt;%s'%(i,j['title']) for j in KV.get(i)['news']]
        _append.append('%s-&gt;%s'%(i
            , ",".join([j['title'] for j in KV.get(i)['news']])
            ))
    
feed_back['data'] = _append

</t>
<t tx="zoomq.20150202122015.15">def _load_news(crt_tag, crt_key, crt_var, multi=False):
    uuid = GENID(crt_tag, name='menu')
    #print uuid
    #return None
    new_paper = deepcopy(CFG.K4WD)
    new_paper['uuid'] = uuid # 对象创建时, 变更时间戳同 UUID
    new_paper['his_id'] = uuid
    new_paper['lasttm'] = time.time()
    new_paper['tag'] = crt_tag
    new_paper['code'] = crt_tag+crt_key
    #CFG.ESSAY_TAG_ID[crt_tag]+crt_key
    #print new_paper['code']
    if multi:
        # mulit news
        #print crt_var
        new_paper['news'] = [{'title':i['title']
            , 'uri':i['uri']
            , 'pic':i['img']
            } for i in crt_var]
        #print new_paper['news']
    else:
        # sinle news
        #print crt_var
        new_paper['news'] = [{'title':crt_var['title']
            , 'uri':crt_var['uri']
            , 'pic':crt_var['img']
            }]
    KV.add(new_paper['code'], new_paper)
    ADD4SYS(crt_tag, new_paper['code'])
    return uuid


</t>
<t tx="zoomq.20150202122015.17">toUser = XCFG.AS_SRV
fromUser = XCFG.AS_USR
tStamp = int(time())
content = args.split("=")[-1].strip()
xml = CFG.TPL_CLICK % locals()
cmd = "curl -d '%s' %s/%s "% (xml, AS_LOCAL, 'echo')
#print xml
#return None


</t>
<t tx="zoomq.20150202122015.18">toUser = XCFG.AS_SRV
fromUser = XCFG.AS_USR
tStamp = int(time())
content = args.split("=")[-1].strip()
xml = CFG.TPL_TEXT % locals()
cmd = "curl -d '%s' %s/%s "% (xml, AS_LOCAL, 'echo')
#print cmd
#return None


</t>
<t tx="zoomq.20150202122015.19">for i in KV.get(CFG.K4D[_tg]):
    #print 
    KV.delete(i)

KV.set(CFG.K4D[_tg],[])

</t>
<t tx="zoomq.20150202122015.22">#print wxreq.Event
print wxreq.EventKey

return _wx_echo_idx(wxreq, wxreq.EventKey)

#return None
#WxTextResponse(CFG.TXT_HELP, wxreq).as_xml()


</t>
<t tx="zoomq.20150202122015.23">_TAG_PAPERS = '''%s :
%s
'''
return WxTextResponse(_TAG_PAPERS%( 'tag'
        ,'LIST' )
    , wxreq).as_xml()

</t>
<t tx="zoomq.20150202122015.5">#   150201 usage sub-class from jeff
from wechat.official import WxApplication
from wechat.official import WxRequest, WxTextResponse
from wechat.official import WxNewsResponse, WxArticle

class WxApp(WxApplication):

    SECRET_TOKEN = XCFG.TOKEN
    WECHAT_APPID = XCFG.APPKEY
    WECHAT_APPSECRET = XCFG.SECRET
    WELCOME_TXT = CFG.TXT_WELCOME
    
    @others

</t>
<t tx="zoomq.20150202122015.6">def on_text(self, wxreq):
    return WxTextResponse(wxreq.Content, wxreq)
</t>
<t tx="zoomq.20150202122015.7">cmd = wxreq.Content
if cmd.isdigit():
    #print cmd
    if cmd in CFG.ESSAY_TAG_KEYS:
        #print "ESSAY_TAG_KEYS", cmd
        return _wx_echo_idx(wxreq, cmd)
    else:
        return _wx_echo_cnt(wxreq, cmd)
else:
    if cmd in CFG.CMD_ALIAS:
        return _wx_echo_cmd(wxreq, cmd)
    else:
        return None
        #WxTextResponse(CFG.TXT_HELP, wxreq).as_xml()
        #print cmd

    #if 8 &gt; len(crt_usr['msg']):
    #print cmd


</t>
<t tx="zoomq.20150202122015.8">import os
#关闭fetchurl，让httplib直接使用socket服务来连接
os.environ['disable_fetchurl'] = "1" 
import sys   
import time #import time, gmtime, strftime, localtime
from datetime import datetime
import traceback
import httplib
import urllib 
import urllib2
# 打开urllib2的debug开关
urllib2.install_opener(urllib2.build_opener(urllib2.HTTPSHandler(1)))

import hashlib
import json
import string
import base64
import cPickle
#import ConfigParser
from os.path import splitext as os_splitext
from os.path import exists as os_exists

from copy import deepcopy
import xml.etree.ElementTree as etree

</t>
<t tx="zoomq.20150202122015.9">from auth import _query2dict, _chkQueryArgs

from utility import INCR4KV as __incr
from utility import TSTAMP, GENID, USRID, DAMAID
from utility import ADD4SYS
from utility import PUT2SS

from utility import WxApp
</t>
<t tx="zoomq.20150203153224.10">@APP.get('/cli/get/acc/&lt;qstr&gt;')
def get_acc(qstr):
    '''定期获得 access_token
    '''
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/get/acc", q_dict, "GET"):
        print XCFG.access
        import requests
        r = requests.get(XCFG.access)
        _json = json.loads(r.text)
        _acc = {}
        _acc['access_token'] = _json['access_token']
        _acc['expires_in'] = time.time()+int(_json['expires_in'])
        KV.set(CFG.K4D['acc'],_acc)
        return KV.get(CFG.K4D['acc'])
    else:
        return "alert quary!-("
    </t>
<t tx="zoomq.20150203153224.13">def _limit_echo_idx(all_papers, cmd):
    '''check all echo TEXT, if &gt; 960, zip them
    '''
    _exp = ""
    &lt;&lt;正常&gt;&gt;
    real_exp = TPL_IDX_CLASS.format(idx_news = _exp
            , tag_info = CFG.ESSAY_TAG[cmd]
            )
    print "len(real_exp)", len(real_exp)
    if 960 &lt; len(real_exp):
        _exp = ""
        &lt;&lt;压缩&gt;&gt;
        real_exp = TPL_IDX_CLASS.format(idx_news = _exp
                , tag_info = CFG.ESSAY_TAG[cmd]
                )
        print "ZIP real_exp", len(real_exp)
        return real_exp
    else:
        return real_exp

</t>
<t tx="zoomq.20150203153224.14">for i in all_papers:
    #print ['%s-&gt;%s'%(i,j['title']) for j in KV.get(i)['news']]
    _node = KV.get(i)
    if 1 == len(_node['news']):
        _exp += u"%s %s\n"%(_node['code']
            , _node['news'][0]['title']
            )
    else:
        #'\n\t+'.join([j['title'] for j  in _node['news']])
        _exp += u"%s %s +另%s篇\n"%(_node['code']
            , _node['news'][0]['title']
            , len(_node['news'])
            )
</t>
<t tx="zoomq.20150203153224.15">for i in all_papers:
    #print ['%s-&gt;%s'%(i,j['title']) for j in KV.get(i)['news']]
    _node = KV.get(i)
    if 1 == len(_node['news']):
        _exp += u"%s %s..\n"%(_node['code']
            , _node['news'][0]['title'][:10]
            )
    else:
        #'\n\t+'.join([j['title'] for j  in _node['news']])
        _exp += u"%s %s..+另%s篇\n"%(_node['code']
            , _node['news'][0]['title'][:10]
            , len(_node['news'])
            )
</t>
<t tx="zoomq.20150203153224.9">TPL_IDX_CLASS = u'''{tag_info}
{idx_news}

输入索引号可获文章链接
(上述前缀 1446 样的纯数字)
'''
#更多细节,请惯性地输入 h 继续吧 :)

TPL_IDX_LOST = u'''文章索引号: {tag_info}
但是...
历史文章还未整理好
傻z 受命折腾中,敬请期待 눈_눈

更多细节,请惯性地输入 h 继续吧 :)
'''
</t>
<t tx="zoomq.20150708235240.10">from auth import _query2dict, _chkQueryArgs

from utility import INCR4KV as __incr
from utility import TSTAMP, GENID, USRID, DAMAID
from utility import ADD4SYS
from utility import PUT2SS

from utility import WxApp
</t>
<t tx="zoomq.20150708235240.11">import os
#关闭fetchurl，让httplib直接使用socket服务来连接
os.environ['disable_fetchurl'] = "1" 
import sys   
import time #import time, gmtime, strftime, localtime
from datetime import datetime
import traceback
import httplib
import urllib 
import urllib2
# 打开urllib2的debug开关
urllib2.install_opener(urllib2.build_opener(urllib2.HTTPSHandler(1)))

import hashlib
import json
import string
import base64
import cPickle
#import ConfigParser
from os.path import splitext as os_splitext
from os.path import exists as os_exists

from copy import deepcopy
import xml.etree.ElementTree as etree

</t>
<t tx="zoomq.20150708235240.12"># echo for RESTful remote actions
'''
- 全部基于: `/api/cli` 前缀
    - 版本区隔为: `/api/v2/cli` 前缀
- 签名检验
- 时间检验(4.2秒以内, 并发不得超过 `N` 次)
'''

</t>
<t tx="zoomq.20150708235240.13"># collection wechat papers mana. matters
'''
'''
</t>
<t tx="zoomq.20150708235240.14">def _load_news(crt_tag, crt_key, crt_var, multi=False):
    uuid = GENID(crt_tag, name='menu')
    #print uuid
    #return None
    new_paper = deepcopy(CFG.K4WD)
    new_paper['uuid'] = uuid # 对象创建时, 变更时间戳同 UUID
    new_paper['his_id'] = uuid
    new_paper['lasttm'] = time.time()
    new_paper['tag'] = crt_tag
    new_paper['code'] = crt_tag+crt_key
    #CFG.ESSAY_TAG_ID[crt_tag]+crt_key
    #print new_paper['code']
    if multi:
        # mulit news
        #print crt_var
        new_paper['news'] = [{'title':i['title']
            , 'uri':i['uri']
            , 'pic':i['img']
            } for i in crt_var]
        #print new_paper['news']
    else:
        # sinle news
        #print crt_var
        new_paper['news'] = [{'title':crt_var['title']
            , 'uri':crt_var['uri']
            , 'pic':crt_var['img']
            }]
    KV.add(new_paper['code'], new_paper)
    ADD4SYS(crt_tag, new_paper['code'])
    return uuid


</t>
<t tx="zoomq.20150708235240.15">@APP.post('/cli/push/p/&lt;qstr&gt;')
def push_papers(qstr):
    q_dict = _query2dict(qstr)
    q_form = request.forms
    q_file = request.files.get('yaml')

    if _chkQueryArgs("/cli/push/p", q_dict, "POST"):
        feed_back = {'data':[], 'msg':''}
        _yaml = q_file.file.read()
        set_var = yaml.load(_yaml) #q_file.file.read()
        _tg = set_var.keys()[0]        
        &lt;&lt;reset_old&gt;&gt;
        #return None
        &lt;&lt;flush_in&gt;&gt;
        return feed_back
    else:
        return "alert quary!-("



</t>
<t tx="zoomq.20150708235240.16">for i in KV.get(CFG.K4D[_tg]):
    #print 
    KV.delete(i)

KV.set(CFG.K4D[_tg],[])

</t>
<t tx="zoomq.20150708235240.17">#f_name, f_ext = os_splitext(q_file.filename)
count = 0
for k in set_var[_tg].keys():
    count += 1
    if isinstance(set_var[_tg][k], dict):
        # single news
        _load_news(_tg, k, set_var[_tg][k])
        
    elif isinstance(set_var[_tg][k], list):
        # mulit-news
        _load_news(_tg, k, set_var[_tg][k], multi = True)
        #data.append(KV.get_info())
    else:
        pass
feed_back['msg'] += "reloaded %s POSTs. \nin CLASS %s"% (count, _tg)
feed_back['data'].append(KV.get_info())

_append = []
echo_idx = KV.get(CFG.K4D[_tg])
echo_idx.sort()
for i in echo_idx:
    #print ['%s-&gt;%s'%(i,j['title']) for j in KV.get(i)['news']]
    _append.append('%s-&gt;%s'%(i
        , ",".join([j['title'] for j in KV.get(i)['news']])
        ))

feed_back['data'] = _append



</t>
<t tx="zoomq.20150708235240.18">@APP.get('/cli/sum/p/&lt;tag&gt;/&lt;qstr&gt;')
def st_p_tag(tag, qstr):
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/sum/p/%s"% tag, q_dict, "GET"):
        feed_back = {'data':[]}
        #print tag
        all_papers = KV.get(CFG.K4D[tag])
        #print all_papers
        for i in all_papers:
            #print ['%s-&gt;%s'%(i,j['title']) for j in KV.get(i)['news']]
            _node = KV.get(i)
            _info = '''%s &gt; %s: [%s]
                '''%(i
                    , _node['code']
                    , ','.join([j['title'] for j  in _node['news']])
                    )
                
            feed_back['data'].append(_info)
        return feed_back
        
    else:
        return "alert quary !-("

</t>
<t tx="zoomq.20150708235240.19">@APP.get('/cli/info/&lt;uuid&gt;/&lt;qstr&gt;')
def info_kv(uuid, qstr):
    '''查询 UUID 的信息
    '''
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/info/%s"% uuid, q_dict, "GET"):
        feed_back = {'data':[]}
        print "info_kv()&gt;&gt;&gt; ",uuid
        print KV.get(uuid)
        #return KV.get(uuid)
        feed_back['msg'] = "safe quary;-)"
        feed_back['data'] = KV.get(uuid)
        return feed_back
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20150708235240.20">@APP.get('/cli/st/kv/&lt;qstr&gt;')
def st_kv(qstr):
    '''查询 KVDB 整体现状
    '''
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/st/kv", q_dict, "GET"):
        feed_back = {'data':[]}
        #data.append(KV.get_info())
        return KV.get_info()
        feed_back['msg'] = "safe quary;-)"
        feed_back['data'] = KV.get_info()
        return feed_back
    else:
        return "alert quary!-("

</t>
<t tx="zoomq.20150708235240.21">@APP.get('/cli/get/acc/&lt;qstr&gt;')
def get_acc(qstr):
    '''定期获得 access_token
    '''
    q_dict = _query2dict(qstr)
    if _chkQueryArgs("/cli/get/acc", q_dict, "GET"):
        print XCFG.access
        import requests
        r = requests.get(XCFG.access)
        _json = json.loads(r.text)
        _acc = {}
        _acc['access_token'] = _json['access_token']
        _acc['expires_in'] = time.time()+int(_json['expires_in'])
        KV.set(CFG.K4D['acc'],_acc)
        return KV.get(CFG.K4D['acc'])
    else:
        return "alert quary!-("
    </t>
<t tx="zoomq.20150708235240.22">@APP.get('/echo')
@APP.get('/echo/')
def echo_wechat():
    '''wechat app token echo
    '''
    #print request.query.keys()
    #print request.query.echostr
    #print request.query_string
    #print dir(BaseRequest.query_string)
    return request.query.echostr
    #return app = WxApplication.process(request.query, None)
    

'''
def wechat(request):
    app = EchoApp()
    result = app.process(request.GET, request.body, token='your token')
    return HttpResponse(result)
'''

</t>
<t tx="zoomq.20150708235240.23">@APP.post('/echo/')
@APP.post('/echo')
def wechat_post():
    # usage jeff SDK for wechat...
    #print request.query
    #print request.query_string
    #print request.forms
    if CFG.AS_SAE:
        #wxa = WxApplication.process(request.GET, request.body)
        wxa = WxApplication(token=XCFG.TOKEN)
        chkwx = wxa.is_valid_params(request.query)
        if not chkwx:
            return None
    else:
        print "Debugging localhost..."
    ## 注意! 从公众号来的消息和订阅号完全不同的,需要另外解析!
    print "request.forms.keys()\t\n", request.forms.keys()
    print "request.forms.keys()[0]\t\n", request.forms.keys()[0]
    wxreq = WxRequest(request.forms.keys()[0])
    if 'text' == wxreq.MsgType:
        &lt;&lt;echo TEXT&gt;&gt;
    elif 'event' == wxreq.MsgType:
        &lt;&lt;echo event&gt;&gt;
    elif 'CLICK' == wxreq.MsgType:
        &lt;&lt;echo CLICK&gt;&gt;
    return None
    



</t>
<t tx="zoomq.20150708235240.24">_TAG_PAPERS = '''%s :
%s
'''
return WxTextResponse(_TAG_PAPERS%( 'tag'
        ,'LIST' )
    , wxreq).as_xml()

</t>
<t tx="zoomq.20150708235240.25">#print wxreq.Event
print wxreq.EventKey

return _wx_echo_idx(wxreq, wxreq.EventKey)

#return None
#WxTextResponse(CFG.TXT_HELP, wxreq).as_xml()


</t>
<t tx="zoomq.20150708235240.26">cmd = wxreq.Content
if cmd.isdigit():
    #print cmd
    if cmd in CFG.ESSAY_TAG_KEYS:
        #print "ESSAY_TAG_KEYS", cmd
        return _wx_echo_idx(wxreq, cmd)
    else:
        return _wx_echo_cnt(wxreq, cmd)
else:
    if cmd in CFG.CMD_ALIAS:
        return _wx_echo_cmd(wxreq, cmd)
    else:
        return None
        #WxTextResponse(CFG.TXT_HELP, wxreq).as_xml()
        #print cmd

    #if 8 &gt; len(crt_usr['msg']):
    #print cmd


</t>
<t tx="zoomq.20150708235240.27">def _wx_echo_cnt(wxreq, cmd):
    print "_wx_echo_cnt", cmd
    _items = KV.get(str(cmd))
    #print _items
    #return None
    resp = WxNewsResponse(
            [WxArticle(p['title']
                ,Description=""
                ,Url=p['uri']
                ,PicUrl=p['pic']) for p in _items['news']]
            , wxreq).as_xml()

    return resp
    #return WxTextResponse(CFG.TXT_HELP, wxreq).as_xml()</t>
<t tx="zoomq.20150708235240.28">def _wx_echo_idx(wxreq, cmd):
    print "_wx_echo_idx", cmd
    all_papers = KV.get(CFG.K4D[cmd])
    #print 
    all_papers.sort()
    #print len(all_papers)
    #print CFG.ESSAY_TAG[cmd]
    if 0 == len(all_papers):
        #_exp = TPL_IDX_LOST.format( tag_info = CFG.ESSAY_TAG[cmd])
        #u"但是...历史文章还未整理索引起来,敬请期待 눈_눈"
        return WxTextResponse(TPL_IDX_LOST.format( tag_info = CFG.ESSAY_TAG[cmd])
                , wxreq).as_xml()
    else:
        real_exp = _limit_echo_idx(all_papers, cmd)
        return WxTextResponse(real_exp, wxreq).as_xml()



</t>
<t tx="zoomq.20150708235240.29">def _limit_echo_idx(all_papers, cmd):
    '''check all echo TEXT, if &gt; 960, zip them
    '''
    _exp = ""
    &lt;&lt;正常&gt;&gt;
    real_exp = TPL_IDX_CLASS.format(idx_news = _exp
            , tag_info = CFG.ESSAY_TAG[cmd]
            )
    print "len(real_exp)", len(real_exp)
    if 960 &lt; len(real_exp):
        _exp = ""
        &lt;&lt;压缩&gt;&gt;
        real_exp = TPL_IDX_CLASS.format(idx_news = _exp
                , tag_info = CFG.ESSAY_TAG[cmd]
                )
        print "ZIP real_exp", len(real_exp)
        return real_exp
    else:
        return real_exp

</t>
<t tx="zoomq.20150708235240.30">for i in all_papers:
    #print ['%s-&gt;%s'%(i,j['title']) for j in KV.get(i)['news']]
    _node = KV.get(i)
    if 1 == len(_node['news']):
        _exp += u"%s %s\n"%(_node['code']
            , _node['news'][0]['title']
            )
    else:
        #'\n\t+'.join([j['title'] for j  in _node['news']])
        _exp += u"%s %s +另%s篇\n"%(_node['code']
            , _node['news'][0]['title']
            , len(_node['news'])
            )
</t>
<t tx="zoomq.20150708235240.31">for i in all_papers:
    #print ['%s-&gt;%s'%(i,j['title']) for j in KV.get(i)['news']]
    _node = KV.get(i)
    if 1 == len(_node['news']):
        _exp += u"%s %s..\n"%(_node['code']
            , _node['news'][0]['title'][:10]
            )
    else:
        #'\n\t+'.join([j['title'] for j  in _node['news']])
        _exp += u"%s %s..+另%s篇\n"%(_node['code']
            , _node['news'][0]['title'][:10]
            , len(_node['news'])
            )
</t>
<t tx="zoomq.20150708235240.32">def _wx_echo_cmd(wxreq, cmd):
    for k in CFG.CMD_TPLS.keys():
        if cmd in k:
            print CFG.CMD_TPLS[k]
            _TPL = eval('CFG.%s'% CFG.CMD_TPLS[k])
            #print type(_TPL)
            #print type(CFG.TXT_HELP)
            return WxTextResponse(_TPL, wxreq).as_xml()
    #return None
    return WxTextResponse(CFG.TXT_HELP, wxreq).as_xml()



</t>
<t tx="zoomq.20150708235240.33">@APP.route('/sysincr')
#@APP.route('/&lt;ddd&gt;/sysincr')
def sysincr():
    from utility import INCR4KV as __incr
    #kv = sae.kvdb.KVClient()
    #print  kv.get_info()
    return str(__incr())




</t>
<t tx="zoomq.20150708235240.34">#@view('404.html')
@APP.error(404)
def error404(error):
    return '''


\          SORRY            /
 \                         /
  \    This page does     /
   ]   not exist yet.    [    ,'|
   ]                     [   /  |
   ]___               ___[ ,'   |
   ]  ]\             /[  [ |:   |
   ]  ] \           / [  [ |:   |
   ]  ]  ]         [  [  [ |:   |
   ]  ]  ]__     __[  [  [ |:   |
   ]  ]  ] ]\ _ /[ [  [  [ |:   |
   ]  ]  ] ] (#) [ [  [  [ :===='
   ]  ]  ]_].nHn.[_[  [  [
   ]  ]  ]  HHHHH. [  [  [
   ]  ] /   `HH("N  \ [  [
   ]__]/     HHH  "  \[__[
   ]         NNN         [
   ]         N/"         [
   ]         N H         [
  /          N            \

/                           \

roaring zoomquiet+404@gmail.com
'''
#    return template('404.html')

@APP.route('/favicon.ico')
def favicon():
    abort(204)
    
@APP.route('/static/&lt;filename&gt;')
def server_static(filename):
    return static_file(filename, root='static')
    </t>
<t tx="zoomq.20150708235240.7">@language py
# -*- coding: utf-8 -*-
&lt;&lt;declarations&gt;&gt;
#print sys.path
from config import CFG
from xsettings import XCFG
KV = CFG.KV #sae.kvdb.KVClient(debug=1)
BK = CFG.BK
debug(True)

APP = Bottle()

@others






</t>
<t tx="zoomq.20150708235240.8">@others

&lt;&lt;自制模块&gt;&gt;
import yaml

import pyfsm
from pyfsm import state, transition

#from wechat.official import WxApplication, WxRequest, WxTextResponse, WxNewsResponse, WxArticle
from wechat.official import WxApplication
from wechat.official import WxRequest, WxTextResponse
from wechat.official import WxNewsResponse, WxArticle

from bottle import *
from bottle import __version__ as bottleVer
#from bottle import jinja2_template as template


</t>
<t tx="zoomq.20150708235240.9">TPL_IDX_CLASS = u'''{tag_info}
{idx_news}

输入索引号可获文章链接
(上述前缀 1446 样的纯数字)
'''
#更多细节,请惯性地输入 h 继续吧 :)

TPL_IDX_LOST = u'''{tag_info}
但是...
历史文章还未整理好
傻z 受命折腾中,敬请期待 눈_눈

更多细节,请惯性地输入 h 继续吧 :)
'''
</t>
<t tx="zoomq.20150907174247.42">#print "cmd: ",cmd
_items = KV.get("00{}".format(cmd))
#print _items
if _items:
    resp = WxNewsResponse(
            [WxArticle(p['title']
                ,Description=""
                ,Url=p['uri']
                ,PicUrl=p['pic']) for p in _items['news']]
            , wxreq).as_xml()
else:
    return WxTextResponse(TPL_IDX_LOST.format( tag_info = cmd)
                , wxreq).as_xml()
</t>
</tnodes>
</leo_file>
